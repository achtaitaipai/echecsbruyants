{"mappings":"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","sources":["node_modules/@swc/helpers/src/_class_call_check.js","node_modules/@swc/helpers/src/_create_class.js","node_modules/@swc/helpers/src/_to_consumable_array.js","node_modules/@swc/helpers/src/_array_without_holes.js","node_modules/@swc/helpers/src/_iterable_to_array.js","node_modules/@swc/helpers/src/_non_iterable_spread.js","src/js/pieces.js","node_modules/cm-pgn/src/cm-pgn/Header.js","node_modules/cm-pgn/src/cm-pgn/parser/pgnParser.js","node_modules/cm-pgn/lib/chess.mjs/Chess.js","node_modules/cm-pgn/src/cm-pgn/History.js","node_modules/cm-pgn/src/cm-pgn/Pgn.js","node_modules/@chess-fu/fen-parser/dist/src/fenParser.js","src/pgn/1-1996.js","src/main.js","src/js/chessboard.js"],"sourcesContent":["export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n","import arrayWithoutHoles from './_array_without_holes';\nimport iterableToArray from './_iterable_to_array';\nimport nonIterableSpread from './_non_iterable_spread';\n\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n","import { chessNotationToGridPosition } from './utils'\r\n/**\r\n *\r\n * @param {String} pos\r\n * @param {Boolean} isWhite\r\n */\r\nexport function Pawn(pos, isWhite) {\r\n\tthis.cnPos = pos\r\n\tthis.pos = pos\r\n\tthis.isWhite = isWhite\r\n\r\n\t/**\r\n\t *\r\n\t * @param {Object} chessboard\r\n\t */\r\n\tthis.draw = function (chessboard) {\r\n\t\tconst ctx = chessboard.ctx\r\n\t\tconst width = chessboard.cellWidth\r\n\t\tconst height = chessboard.cellHeight\r\n\t\tconst x = this.pos.x * width + width / 2\r\n\t\tconst y = this.pos.y * height + height / 2\r\n\t\tconst r = width * 0.3 * 0.5\r\n\r\n\t\tctx.beginPath()\r\n\t\tctx.arc(x, y, r, 0, 2 * Math.PI, false)\r\n\t\tif (this.isWhite) {\r\n\t\t\tctx.strokeStyle = 'rgb(0, 0, 0)'\r\n\t\t\tctx.stroke()\r\n\t\t} else {\r\n\t\t\tctx.fillStyle = 'rgb(0, 0, 0)'\r\n\t\t\tctx.fill()\r\n\t\t}\r\n\t\tctx.closePath()\r\n\t}\r\n}\r\n\r\n/**\r\n *\r\n * @param {String} pos\r\n * @param {Boolean} isWhite\r\n */\r\nexport function Rook(pos, isWhite) {\r\n\tthis.cnPos = pos\r\n\tthis.pos = pos\r\n\tthis.isWhite = isWhite\r\n\r\n\t/**\r\n\t *\r\n\t * @param {Object} chessboard\r\n\t */\r\n\tthis.draw = function (chessboard) {\r\n\t\tconst ctx = chessboard.ctx\r\n\t\tconst width = chessboard.cellWidth\r\n\t\tconst height = chessboard.cellHeight\r\n\t\tconst rectWidth = width * 0.4\r\n\t\tconst rectHeight = height * 0.6\r\n\t\tconst x = this.pos.x * width + (width - rectWidth) * 0.5\r\n\t\tconst y = this.pos.y * height + (height - rectHeight) * 0.5\r\n\t\tconst r = width * 0.3 * 0.5\r\n\r\n\t\tif (this.isWhite) {\r\n\t\t\tctx.strokeStyle = 'rgb(0,0,0)'\r\n\t\t\tctx.strokeRect(x, y, rectWidth, rectHeight)\r\n\t\t} else {\r\n\t\t\tctx.fillStyle = 'rgb(0,0,0)'\r\n\t\t\tctx.fillRect(x, y, rectWidth, rectHeight)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n *\r\n * @param {String} pos\r\n * @param {Boolean} isWhite\r\n */\r\nexport function Knight(pos, isWhite) {\r\n\tthis.cnPos = pos\r\n\tthis.pos = pos\r\n\tthis.isWhite = isWhite\r\n\r\n\t/**\r\n\t *\r\n\t * @param {Object} chessboard\r\n\t */\r\n\tthis.draw = function (chessboard) {\r\n\t\tconst ctx = chessboard.ctx\r\n\t\tconst width = chessboard.cellWidth\r\n\t\tconst height = chessboard.cellHeight\r\n\t\tconst horizontalW = width * 0.5\r\n\t\tconst horizontalH = width * 0.2\r\n\t\tconst verticalW = width * 0.3\r\n\t\tconst verticalH = width * 0.6\r\n\t\tconst x = -verticalW * 0.5\r\n\t\tconst y = -verticalH * 0.5\r\n\t\tconst tx = this.pos.x * width + horizontalW\r\n\t\tconst ty = this.pos.y * height + horizontalW\r\n\r\n\t\tctx.translate(tx, ty)\r\n\t\tif (!this.isWhite) ctx.scale(-1, 1)\r\n\t\tctx.beginPath()\r\n\t\tctx.moveTo(x, y)\r\n\t\tctx.lineTo(x + horizontalW, y)\r\n\t\tctx.lineTo(x + horizontalW, y + horizontalH)\r\n\t\tctx.lineTo(x + verticalW, y + horizontalH)\r\n\t\tctx.lineTo(x + verticalW, y + verticalH)\r\n\t\tctx.lineTo(x, y + verticalH)\r\n\t\tctx.closePath()\r\n\t\tctx.setTransform(1, 0, 0, 1, 0, 0)\r\n\t\tctx.strokeStyle = 'rgb(0, 0, 0)'\r\n\t\tif (this.isWhite) {\r\n\t\t\tctx.strokeStyle = 'rgb(0, 0, 0)'\r\n\t\t\tctx.stroke()\r\n\t\t} else {\r\n\t\t\tctx.fillStyle = 'rgb(0, 0, 0)'\r\n\t\t\tctx.fill()\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n *\r\n * @param {String} pos\r\n * @param {Boolean} isWhite\r\n */\r\nexport function Bishop(pos, isWhite) {\r\n\tthis.cnPos = pos\r\n\tthis.pos = pos\r\n\tthis.isWhite = isWhite\r\n\r\n\t/**\r\n\t *\r\n\t * @param {Object} chessboard\r\n\t */\r\n\tthis.draw = function (chessboard) {\r\n\t\tconst ctx = chessboard.ctx\r\n\t\tconst width = chessboard.cellWidth\r\n\t\tconst height = chessboard.cellHeight\r\n\t\tconst tWidth = width * 0.4\r\n\t\tconst tHeight = height * 0.6\r\n\t\tconst x = this.pos.x * width + width * 0.5\r\n\t\tconst y = this.pos.y * height + (height - tHeight) * 0.5\r\n\r\n\t\tctx.beginPath()\r\n\t\tctx.moveTo(x, y)\r\n\t\tctx.lineTo(x + tWidth * 0.5, y + tHeight)\r\n\t\tctx.lineTo(x - tWidth * 0.5, y + tHeight)\r\n\t\tctx.closePath()\r\n\t\tctx.strokeStyle = 'rgb(0, 0, 0)'\r\n\t\tif (this.isWhite) {\r\n\t\t\tctx.strokeStyle = 'rgb(0, 0, 0)'\r\n\t\t\tctx.stroke()\r\n\t\t} else {\r\n\t\t\tctx.fillStyle = 'rgb(0, 0, 0)'\r\n\t\t\tctx.fill()\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n *\r\n * @param {String} pos\r\n * @param {Boolean} isWhite\r\n */\r\nexport function Queen(pos, isWhite) {\r\n\tthis.cnPos = pos\r\n\tthis.pos = pos\r\n\tthis.isWhite = isWhite\r\n\r\n\t/**\r\n\t *\r\n\t * @param {Object} chessboard\r\n\t */\r\n\tthis.draw = function (chessboard) {\r\n\t\tconst ctx = chessboard.ctx\r\n\t\tconst width = chessboard.cellWidth\r\n\t\tconst height = chessboard.cellHeight\r\n\t\tconst hWidth = width * 0.6\r\n\t\tconst hHeight = width * 0.1\r\n\t\tconst vWidth = height * 0.1\r\n\t\tconst vHeight = height * 0.6\r\n\t\tconst x = (width - vWidth) * 0.5 - width * 0.5\r\n\t\tconst y = (height - vHeight) * 0.5 - height * 0.5\r\n\t\tconst tx = this.pos.x * width + width * 0.5\r\n\t\tconst ty = this.pos.y * height + height * 0.5\r\n\r\n\t\tctx.translate(tx, ty)\r\n\t\tctx.rotate((45 * Math.PI) / 180)\r\n\t\tctx.beginPath()\r\n\t\tctx.moveTo(x, y)\r\n\t\tctx.lineTo(x + vWidth, y)\r\n\t\tctx.lineTo(x + vWidth, y + (vHeight - hHeight) * 0.5)\r\n\t\tctx.lineTo(x + vWidth + (hWidth - vWidth) * 0.5, y + (vHeight - hHeight) * 0.5)\r\n\t\tctx.lineTo(x + vWidth + (hWidth - vWidth) * 0.5, y + (vHeight + hHeight) * 0.5)\r\n\t\tctx.lineTo(x + vWidth, y + (vHeight + hHeight) * 0.5)\r\n\t\tctx.lineTo(x + vWidth, y + vHeight)\r\n\t\tctx.lineTo(x, y + vHeight)\r\n\t\tctx.lineTo(x, y + (vHeight + hHeight) * 0.5)\r\n\t\tctx.lineTo(x - (hWidth - vWidth) * 0.5, y + (vHeight + hHeight) * 0.5)\r\n\t\tctx.lineTo(x - (hWidth - vWidth) * 0.5, y + (vHeight - hHeight) * 0.5)\r\n\t\tctx.lineTo(x, y + (vHeight - hHeight) * 0.5)\r\n\t\tctx.closePath()\r\n\t\tctx.setTransform(1, 0, 0, 1, 0, 0)\r\n\t\tctx.strokeStyle = 'rgb(0, 0, 0)'\r\n\t\tif (this.isWhite) {\r\n\t\t\tctx.strokeStyle = 'rgb(0, 0, 0)'\r\n\t\t\tctx.stroke()\r\n\t\t} else {\r\n\t\t\tctx.fillStyle = 'rgb(0, 0, 0)'\r\n\t\t\tctx.fill()\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n *\r\n * @param {String} pos\r\n * @param {Boolean} isWhite\r\n */\r\nexport function King(pos, isWhite) {\r\n\tthis.cnPos = pos\r\n\tthis.pos = pos\r\n\tthis.isWhite = isWhite\r\n\r\n\t/**\r\n\t *\r\n\t * @param {Object} chessboard\r\n\t */\r\n\tthis.draw = function (chessboard) {\r\n\t\tconst ctx = chessboard.ctx\r\n\t\tconst width = chessboard.cellWidth\r\n\t\tconst height = chessboard.cellHeight\r\n\t\tconst hWidth = width * 0.6\r\n\t\tconst hHeight = width * 0.2\r\n\t\tconst vWidth = height * 0.2\r\n\t\tconst vHeight = height * 0.6\r\n\t\tconst x = (width - vWidth) * 0.5 - width * 0.5\r\n\t\tconst y = (height - vHeight) * 0.5 - height * 0.5\r\n\t\tconst tx = this.pos.x * width + width * 0.5\r\n\t\tconst ty = this.pos.y * height + height * 0.5\r\n\r\n\t\tctx.translate(tx, ty)\r\n\t\tctx.beginPath()\r\n\t\tctx.moveTo(x, y)\r\n\t\tctx.lineTo(x + vWidth, y)\r\n\t\tctx.lineTo(x + vWidth, y + (vHeight - hHeight) * 0.5)\r\n\t\tctx.lineTo(x + vWidth + (hWidth - vWidth) * 0.5, y + (vHeight - hHeight) * 0.5)\r\n\t\tctx.lineTo(x + vWidth + (hWidth - vWidth) * 0.5, y + (vHeight + hHeight) * 0.5)\r\n\t\tctx.lineTo(x + vWidth, y + (vHeight + hHeight) * 0.5)\r\n\t\tctx.lineTo(x + vWidth, y + vHeight)\r\n\t\tctx.lineTo(x, y + vHeight)\r\n\t\tctx.lineTo(x, y + (vHeight + hHeight) * 0.5)\r\n\t\tctx.lineTo(x - (hWidth - vWidth) * 0.5, y + (vHeight + hHeight) * 0.5)\r\n\t\tctx.lineTo(x - (hWidth - vWidth) * 0.5, y + (vHeight - hHeight) * 0.5)\r\n\t\tctx.lineTo(x, y + (vHeight - hHeight) * 0.5)\r\n\t\tctx.closePath()\r\n\t\tctx.setTransform(1, 0, 0, 1, 0, 0)\r\n\t\tctx.strokeStyle = 'rgb(0, 0, 0)'\r\n\t\tif (this.isWhite) {\r\n\t\t\tctx.strokeStyle = 'rgb(0, 0, 0)'\r\n\t\t\tctx.stroke()\r\n\t\t} else {\r\n\t\t\tctx.fillStyle = 'rgb(0, 0, 0)'\r\n\t\t\tctx.fill()\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// export pieces = [\r\n// \tnew Rook('a1', true),\r\n// \tnew Knight('b1', true),\r\n// \tnew Bishop('c1', true),\r\n// \tnew Queen('d1', true),\r\n// \tnew King('e1', true),\r\n// \tnew Bishop('f1', true),\r\n// \tnew Knight('g1', true),\r\n// \tnew Rook('a1', true),\r\n// \tnew Rook('h1', true),\r\n// \tnew Pawn('a2', true),\r\n// \tnew Pawn('b2', true),\r\n// \tnew Pawn('c2', true),\r\n// \tnew Pawn('d2', true),\r\n// \tnew Pawn('e2', true),\r\n// \tnew Pawn('f2', true),\r\n// \tnew Pawn('g2', true),\r\n// \tnew Pawn('h2', true),\r\n// \tnew Rook('a8', false),\r\n// \tnew Knight('b8', false),\r\n// \tnew Bishop('c8', false),\r\n// \tnew Queen('d8', false),\r\n// \tnew King('e8', false),\r\n// \tnew Bishop('f8', false),\r\n// \tnew Knight('g8', false),\r\n// \tnew Rook('a8', false),\r\n// \tnew Rook('h8', false),\r\n// \tnew Pawn('a7', false),\r\n// \tnew Pawn('b7', false),\r\n// \tnew Pawn('c7', false),\r\n// \tnew Pawn('d7', false),\r\n// \tnew Pawn('e7', false),\r\n// \tnew Pawn('f7', false),\r\n// \tnew Pawn('g7', false),\r\n// \tnew Pawn('h7', false),\r\n// ]\r\n","/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-pgn\n * License: MIT, see file 'LICENSE'\n */\nexport const TAGS = {\n\n    // Standard \"Seven Tag Roster\"\n    Event: \"Event\", // the name of the tournament or match event\n    Site: \"Site\", // the location of the event\n    Date: \"Date\", // the starting date of the game (format: YYYY.MM.TT)\n    Round: \"Round\", // the playing round ordinal of the game\n    White: \"White\", // the player of the white pieces (last name, pre name)\n    Black: \"Black\", // the player of the black pieces (last name, pre name)\n    Result: \"Result\", // the result of the game (1-0, 1/2-1/2, 0-1, *)\n\n    // Optional (http://www.saremba.de/chessgml/standards/pgn/pgn-complete.htm#c9)\n    //      Player related information\n    WhiteTitle: \"WhiteTitle\", BlackTitle: \"BlackTitle\", // These use string values such as \"FM\", \"IM\", and \"GM\"; these tags are used only for the standard abbreviations for FIDE titles. A value of \"-\" is used for an untitled player.\n    WhiteElo: \"WhiteElo\", BlackElo: \"BlackElo\", // These tags use integer values; these are used for FIDE Elo ratings. A value of \"-\" is used for an unrated player.\n    WhiteUSCF: \"WhiteUSCF\", BlackUSCF: \"BlackUSCF\", // These tags use integer values; these are used for USCF (United States Chess Federation) ratings. Similar tag names can be constructed for other rating agencies.\n    WhiteNA: \"WhiteNA\", BlackNA: \"BlackNA:\", // These tags use string values; these are the e-mail or network addresses of the players. A value of \"-\" is used for a player without an electronic address.\n    WhiteType: \"WhiteType\", BlackType: \"BlackType\", // These tags use string values; these describe the player types. The value \"human\" should be used for a person while the value \"program\" should be used for algorithmic (computer) players.\n    //      Event related information\n    EventDate: \"EventDate\", // This uses a date value, similar to the Date tag field, that gives the starting date of the Event.\n    EventSponsor: \"EventSponsor\", // This uses a string value giving the name of the sponsor of the event.\n    Section: \"Section\", // This uses a string; this is used for the playing section of a tournament (e.g., \"Open\" or \"Reserve\").\n    Stage: \"Stage\", // This uses a string; this is used for the stage of a multistage event (e.g., \"Preliminary\" or \"Semifinal\").\n    Board: \"Board\", // This uses an integer; this identifies the board number in a team event and also in a simultaneous exhibition.\n    //      Opening information (locale specific)\n    Opening: \"Opening\", // This uses a string; this is used for the traditional opening name. This will vary by locale. This tag pair is associated with the use of the EPD opcode \"v0\" described in a later section of this document.\n    ECO: \"ECO\", // This uses a string of either the form \"XDD\" or the form \"XDD/DD\" where the \"X\" is a letter from \"A\" to \"E\" and the \"D\" positions are digits.\n    //      Time and date related information\n    Time: \"Time\", // Time the game started, in \"HH:MM:SS\" format, in local clock time.\n    UTCTime: \"UTCTime\", // This tag is similar to the Time tag except that the time is given according to the Universal Coordinated Time standard.\n    UTCDate: \"UTCDate\", // This tag is similar to the Date tag except that the date is given according to the Universal Coordinated Time standard.\n    //      Time control\n    TimeControl: \"TimeControl\", // 40/7200:3600 (moves per seconds: sudden death seconds)\n    //      Alternative starting positions\n    SetUp: \"SetUp\", // \"0\": position is start position, \"1\": tag FEN defines the position\n    FEN: \"FEN\", //  Alternative start position, tag SetUp has to be set to \"1\"\n    //      Game conclusion\n    Termination: \"Termination\", // Gives more details about the termination of the game. It may be \"abandoned\", \"adjudication\" (result determined by third-party adjudication), \"death\", \"emergency\", \"normal\", \"rules infraction\", \"time forfeit\", or \"unterminated\".\n    //      Miscellaneous\n    Annotator: \"Annotator\", // The person providing notes to the game.\n    Mode: \"Mode\", // \"OTB\" (over-the-board) \"ICS\" (Internet Chess Server)\n    PlyCount: \"PlyCount\", // String value denoting total number of half-moves played.\n\n}\n\nexport class Header {\n\n    constructor(headerString = \"\") {\n        this.clear()\n        const rows = headerString.match(/\\[([^\\]]+)]/g)\n        if (rows && rows.length > 0) {\n            for (let i = 0; i < rows.length; i++) {\n                let tag = rows[i].match(/\\[(\\w+)\\s+\"([^\"]+)\"/)\n                if (tag) {\n                    this.tags[tag[1]] = tag[2]\n                }\n            }\n        }\n    }\n\n    clear() {\n        this.tags = {}\n    }\n\n    render() {\n        let rendered = \"\"\n        for (const tag in this.tags) {\n            rendered += `[${tag} \"${this.tags[tag]}\"]\\n`\n        }\n        return rendered\n    }\n\n}\n\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { pgn: peg$parsepgn },\n      peg$startRuleFunction  = peg$parsepgn,\n\n      peg$c0 = function(pw, all) { var arr = (all ? all : []); arr.unshift(pw);return arr; },\n      peg$c1 = function(pb, all) { var arr = (all ? all : []); arr.unshift(pb); return arr; },\n      peg$c2 = function() { return [[]]; },\n      peg$c3 = function(pw) { return pw; },\n      peg$c4 = function(pb) { return pb; },\n      peg$c5 = function(cm, mn, cb, hm, nag, ca, vari, all) { var arr = (all ? all : []);\n            var move = {}; move.turn = 'w'; move.moveNumber = mn;\n            move.notation = hm; move.commentBefore = cb; move.commentAfter = ca; move.commentMove = cm;\n            move.variations = (vari ? vari : []); move.nag = (nag ? nag : null); arr.unshift(move); return arr; },\n      peg$c6 = function(cm, me, cb, hm, nag, ca, vari, all) { var arr = (all ? all : []);\n            var move = {}; move.turn = 'b'; move.moveNumber = me;\n            move.notation = hm; move.commentBefore = cb; move.commentAfter = ca;\n            move.variations = (vari ? vari : []); arr.unshift(move); move.nag = (nag ? nag : null); return arr; },\n      peg$c7 = \"1:0\",\n      peg$c8 = peg$literalExpectation(\"1:0\", false),\n      peg$c9 = function() { return [\"1:0\"]; },\n      peg$c10 = \"0:1\",\n      peg$c11 = peg$literalExpectation(\"0:1\", false),\n      peg$c12 = function() { return [\"0:1\"]; },\n      peg$c13 = \"1-0\",\n      peg$c14 = peg$literalExpectation(\"1-0\", false),\n      peg$c15 = function() { return [\"1-0\"]; },\n      peg$c16 = \"0-1\",\n      peg$c17 = peg$literalExpectation(\"0-1\", false),\n      peg$c18 = function() { return [\"0-1\"]; },\n      peg$c19 = \"1/2-1/2\",\n      peg$c20 = peg$literalExpectation(\"1/2-1/2\", false),\n      peg$c21 = function() { return [\"1/2-1/2\"]; },\n      peg$c22 = \"*\",\n      peg$c23 = peg$literalExpectation(\"*\", false),\n      peg$c24 = function() { return [\"*\"]; },\n      peg$c25 = /^[^}]/,\n      peg$c26 = peg$classExpectation([\"}\"], true, false),\n      peg$c27 = function(cm) { return cm.join(\"\").trim(); },\n      peg$c28 = \"{\",\n      peg$c29 = peg$literalExpectation(\"{\", false),\n      peg$c30 = \"}\",\n      peg$c31 = peg$literalExpectation(\"}\", false),\n      peg$c32 = function(vari, all, me) { var arr = (all ? all : []); arr.unshift(vari); return arr; },\n      peg$c33 = function(vari, all) { var arr = (all ? all : []); arr.unshift(vari); return arr; },\n      peg$c34 = \"(\",\n      peg$c35 = peg$literalExpectation(\"(\", false),\n      peg$c36 = \")\",\n      peg$c37 = peg$literalExpectation(\")\", false),\n      peg$c38 = \".\",\n      peg$c39 = peg$literalExpectation(\".\", false),\n      peg$c40 = function(num) { return num; },\n      peg$c41 = peg$otherExpectation(\"integer\"),\n      peg$c42 = /^[0-9]/,\n      peg$c43 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c44 = function(digits) { return makeInteger(digits); },\n      peg$c45 = \" \",\n      peg$c46 = peg$literalExpectation(\" \", false),\n      peg$c47 = function() { return '';},\n      peg$c48 = function(fig, disc, str, col, row, pr, ch) { var hm = {}; hm.fig = (fig ? fig : null); hm.disc =  (disc ? disc : null); hm.strike = (str ? str : null); hm.col = col; hm.row = row; hm.check = (ch ? ch : null); hm.promotion = pr; hm.notation = (fig ? fig : \"\") + (disc ? disc : \"\") + (str ? str : \"\") + col + row + (pr ? pr : \"\") + (ch ? ch : \"\"); return hm; },\n      peg$c49 = function(fig, cols, rows, str, col, row, pr, ch) { var hm = {}; hm.fig = (fig ? fig : null); hm.strike = (str =='x' ? str : null); hm.col = col; hm.row = row; hm.check = (ch ? ch : null); hm.notation = (fig && (fig!=='P') ? fig : \"\") + cols + rows + (str=='x' ? str : \"-\") + col  + row + (pr ? pr : \"\") + (ch ? ch : \"\"); hm.promotion = pr; return hm; },\n      peg$c50 = function(fig, str, col, row, pr, ch) { var hm = {}; hm.fig = (fig ? fig : null); hm.strike = (str ? str : null); hm.col = col; hm.row = row; hm.check = (ch ? ch : null); hm.notation = (fig ? fig : \"\") + (str ? str : \"\") + col  + row + (pr ? pr : \"\") + (ch ? ch : \"\"); hm.promotion = pr; return hm; },\n      peg$c51 = \"O-O-O\",\n      peg$c52 = peg$literalExpectation(\"O-O-O\", false),\n      peg$c53 = function(ch) { var hm = {}; hm.notation = 'O-O-O'+ (ch ? ch : \"\"); hm.check = (ch ? ch : null); return  hm; },\n      peg$c54 = \"O-O\",\n      peg$c55 = peg$literalExpectation(\"O-O\", false),\n      peg$c56 = function(ch) { var hm = {}; hm.notation = 'O-O'+ (ch ? ch : \"\"); hm.check = (ch ? ch : null); return  hm; },\n      peg$c57 = \"+-\",\n      peg$c58 = peg$literalExpectation(\"+-\", false),\n      peg$c59 = \"+\",\n      peg$c60 = peg$literalExpectation(\"+\", false),\n      peg$c61 = function(ch) { return ch[1]; },\n      peg$c62 = \"$$$\",\n      peg$c63 = peg$literalExpectation(\"$$$\", false),\n      peg$c64 = \"#\",\n      peg$c65 = peg$literalExpectation(\"#\", false),\n      peg$c66 = \"=\",\n      peg$c67 = peg$literalExpectation(\"=\", false),\n      peg$c68 = function(f) { return '=' + f; },\n      peg$c69 = function(nag, nags) { var arr = (nags ? nags : []); arr.unshift(nag); return arr; },\n      peg$c70 = \"$\",\n      peg$c71 = peg$literalExpectation(\"$\", false),\n      peg$c72 = function(num) { return '$' + num; },\n      peg$c73 = \"!!\",\n      peg$c74 = peg$literalExpectation(\"!!\", false),\n      peg$c75 = function() { return '$3'; },\n      peg$c76 = \"??\",\n      peg$c77 = peg$literalExpectation(\"??\", false),\n      peg$c78 = function() { return '$4'; },\n      peg$c79 = \"!?\",\n      peg$c80 = peg$literalExpectation(\"!?\", false),\n      peg$c81 = function() { return '$5'; },\n      peg$c82 = \"?!\",\n      peg$c83 = peg$literalExpectation(\"?!\", false),\n      peg$c84 = function() { return '$6'; },\n      peg$c85 = \"!\",\n      peg$c86 = peg$literalExpectation(\"!\", false),\n      peg$c87 = function() { return '$1'; },\n      peg$c88 = \"?\",\n      peg$c89 = peg$literalExpectation(\"?\", false),\n      peg$c90 = function() { return '$2'; },\n      peg$c91 = \"\\u203C\",\n      peg$c92 = peg$literalExpectation(\"\\u203C\", false),\n      peg$c93 = \"\\u2047\",\n      peg$c94 = peg$literalExpectation(\"\\u2047\", false),\n      peg$c95 = \"\\u2049\",\n      peg$c96 = peg$literalExpectation(\"\\u2049\", false),\n      peg$c97 = \"\\u2048\",\n      peg$c98 = peg$literalExpectation(\"\\u2048\", false),\n      peg$c99 = \"\\u25A1\",\n      peg$c100 = peg$literalExpectation(\"\\u25A1\", false),\n      peg$c101 = function() { return '$7'; },\n      peg$c102 = function() { return '$10'; },\n      peg$c103 = \"\\u221E\",\n      peg$c104 = peg$literalExpectation(\"\\u221E\", false),\n      peg$c105 = function() { return '$13'; },\n      peg$c106 = \"\\u2A72\",\n      peg$c107 = peg$literalExpectation(\"\\u2A72\", false),\n      peg$c108 = function() { return '$14'; },\n      peg$c109 = \"\\u2A71\",\n      peg$c110 = peg$literalExpectation(\"\\u2A71\", false),\n      peg$c111 = function() { return '$15';},\n      peg$c112 = \"\\xB1\",\n      peg$c113 = peg$literalExpectation(\"\\xB1\", false),\n      peg$c114 = function() { return '$16';},\n      peg$c115 = \"\\u2213\",\n      peg$c116 = peg$literalExpectation(\"\\u2213\", false),\n      peg$c117 = function() { return '$17';},\n      peg$c118 = function() { return '$18';},\n      peg$c119 = \"-+\",\n      peg$c120 = peg$literalExpectation(\"-+\", false),\n      peg$c121 = function() { return '$19';},\n      peg$c122 = \"\\u2A00\",\n      peg$c123 = peg$literalExpectation(\"\\u2A00\", false),\n      peg$c124 = function() { return '$22'; },\n      peg$c125 = \"\\u27F3\",\n      peg$c126 = peg$literalExpectation(\"\\u27F3\", false),\n      peg$c127 = function() { return '$32'; },\n      peg$c128 = \"\\u2192\",\n      peg$c129 = peg$literalExpectation(\"\\u2192\", false),\n      peg$c130 = function() { return '$36'; },\n      peg$c131 = \"\\u2191\",\n      peg$c132 = peg$literalExpectation(\"\\u2191\", false),\n      peg$c133 = function() { return '$40'; },\n      peg$c134 = \"\\u21C6\",\n      peg$c135 = peg$literalExpectation(\"\\u21C6\", false),\n      peg$c136 = function() { return '$132'; },\n      peg$c137 = \"D\",\n      peg$c138 = peg$literalExpectation(\"D\", false),\n      peg$c139 = function() { return '$220'; },\n      peg$c140 = /^[RNBQKP]/,\n      peg$c141 = peg$classExpectation([\"R\", \"N\", \"B\", \"Q\", \"K\", \"P\"], false, false),\n      peg$c142 = /^[a-h]/,\n      peg$c143 = peg$classExpectation([[\"a\", \"h\"]], false, false),\n      peg$c144 = /^[1-8]/,\n      peg$c145 = peg$classExpectation([[\"1\", \"8\"]], false, false),\n      peg$c146 = \"x\",\n      peg$c147 = peg$literalExpectation(\"x\", false),\n      peg$c148 = \"-\",\n      peg$c149 = peg$literalExpectation(\"-\", false),\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsepgn() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsepgnStartWhite();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsepgnBlack();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsepgnStartBlack();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsepgnWhite();\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsewhiteSpace();\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c2();\n        }\n        s0 = s1;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsepgnStartWhite() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsepgnWhite();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c3(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsepgnStartBlack() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsepgnBlack();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c4(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsepgnWhite() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewhiteSpace();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsecomment();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsewhiteSpace();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsemoveNumber();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsewhiteSpace();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecomment();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewhiteSpace();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsehalfMove();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsewhiteSpace();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parsenags();\n                      if (s10 === peg$FAILED) {\n                        s10 = null;\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsewhiteSpace();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parsecomment();\n                          if (s12 === peg$FAILED) {\n                            s12 = null;\n                          }\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsewhiteSpace();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parsevariationWhite();\n                              if (s14 === peg$FAILED) {\n                                s14 = null;\n                              }\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsepgnBlack();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c5(s2, s4, s6, s8, s10, s12, s14, s15);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseendGame();\n    }\n\n    return s0;\n  }\n\n  function peg$parsepgnBlack() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewhiteSpace();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsecomment();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsewhiteSpace();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsemoveEllipse();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsewhiteSpace();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecomment();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewhiteSpace();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsehalfMove();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsewhiteSpace();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parsenags();\n                      if (s10 === peg$FAILED) {\n                        s10 = null;\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsewhiteSpace();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parsecomment();\n                          if (s12 === peg$FAILED) {\n                            s12 = null;\n                          }\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsewhiteSpace();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parsevariationBlack();\n                              if (s14 === peg$FAILED) {\n                                s14 = null;\n                              }\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsepgnWhite();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c6(s2, s4, s6, s8, s10, s12, s14, s15);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseendGame();\n    }\n\n    return s0;\n  }\n\n  function peg$parseendGame() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3) === peg$c7) {\n      s1 = peg$c7;\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c8); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c9();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 3) === peg$c10) {\n        s1 = peg$c10;\n        peg$currPos += 3;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c11); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c12();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 3) === peg$c13) {\n          s1 = peg$c13;\n          peg$currPos += 3;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c14); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c15();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 3) === peg$c16) {\n            s1 = peg$c16;\n            peg$currPos += 3;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c17); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c18();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 7) === peg$c19) {\n              s1 = peg$c19;\n              peg$currPos += 7;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c20); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c21();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 42) {\n                s1 = peg$c22;\n                peg$currPos++;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c23); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c24();\n              }\n              s0 = s1;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecl();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c25.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c26); }\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        if (peg$c25.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c26); }\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c27(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecl() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s0 = peg$c28;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c29); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecr() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 125) {\n      s0 = peg$c30;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c31); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsevariationWhite() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsepl();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsepgnWhite();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsepr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsewhiteSpace();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsevariationWhite();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsewhiteSpace();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsemoveEllipse();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c32(s2, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevariationBlack() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsepl();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsepgnStartBlack();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsepr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsewhiteSpace();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsevariationBlack();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c33(s2, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepl() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s0 = peg$c34;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c35); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsepr() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 41) {\n      s0 = peg$c36;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c37); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemoveNumber() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseinteger();\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s2 = peg$c38;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c39); }\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c40(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinteger() {\n    var s0, s1, s2;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c42.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c43); }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$c42.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c43); }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c44(s1);\n    }\n    s0 = s1;\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c41); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhiteSpace() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    if (input.charCodeAt(peg$currPos) === 32) {\n      s2 = peg$c45;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c46); }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (input.charCodeAt(peg$currPos) === 32) {\n          s2 = peg$c45;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c46); }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c47();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsehalfMove() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parsefigure();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parsecheckdisc();\n      peg$silentFails--;\n      if (s3 !== peg$FAILED) {\n        peg$currPos = s2;\n        s2 = void 0;\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsediscriminator();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsestrike();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parserow();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsepromotion();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsecheck();\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c48(s1, s3, s4, s5, s6, s7, s8);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsefigure();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsecolumn();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parserow();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsestrikeOrDash();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsecolumn();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parserow();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsepromotion();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parsecheck();\n                    if (s8 === peg$FAILED) {\n                      s8 = null;\n                    }\n                    if (s8 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c49(s1, s2, s3, s4, s5, s6, s7, s8);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsefigure();\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsestrike();\n          if (s2 === peg$FAILED) {\n            s2 = null;\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsecolumn();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parserow();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parsepromotion();\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parsecheck();\n                  if (s6 === peg$FAILED) {\n                    s6 = null;\n                  }\n                  if (s6 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c50(s1, s2, s3, s4, s5, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 5) === peg$c51) {\n            s1 = peg$c51;\n            peg$currPos += 5;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c52); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsecheck();\n            if (s2 === peg$FAILED) {\n              s2 = null;\n            }\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c53(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 3) === peg$c54) {\n              s1 = peg$c54;\n              peg$currPos += 3;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c55); }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parsecheck();\n              if (s2 === peg$FAILED) {\n                s2 = null;\n              }\n              if (s2 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c56(s2);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecheck() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$currPos;\n    peg$silentFails++;\n    if (input.substr(peg$currPos, 2) === peg$c57) {\n      s3 = peg$c57;\n      peg$currPos += 2;\n    } else {\n      s3 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c58); }\n    }\n    peg$silentFails--;\n    if (s3 === peg$FAILED) {\n      s2 = void 0;\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 43) {\n        s3 = peg$c59;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c60); }\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c61(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$currPos;\n      peg$silentFails++;\n      if (input.substr(peg$currPos, 3) === peg$c62) {\n        s3 = peg$c62;\n        peg$currPos += 3;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c63); }\n      }\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 35) {\n          s3 = peg$c64;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c65); }\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c61(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepromotion() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 61) {\n      s1 = peg$c66;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c67); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsefigure();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c68(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenags() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenag();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsewhiteSpace();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenags();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c69(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenag() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 36) {\n      s1 = peg$c70;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c71); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseinteger();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c72(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c73) {\n        s1 = peg$c73;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c74); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c75();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c76) {\n          s1 = peg$c76;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c77); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c78();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c79) {\n            s1 = peg$c79;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c80); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c81();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c82) {\n              s1 = peg$c82;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c83); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c84();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 33) {\n                s1 = peg$c85;\n                peg$currPos++;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c86); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c87();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.charCodeAt(peg$currPos) === 63) {\n                  s1 = peg$c88;\n                  peg$currPos++;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c89); }\n                }\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c90();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 8252) {\n                    s1 = peg$c91;\n                    peg$currPos++;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c92); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c75();\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.charCodeAt(peg$currPos) === 8263) {\n                      s1 = peg$c93;\n                      peg$currPos++;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c94); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c78();\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      if (input.charCodeAt(peg$currPos) === 8265) {\n                        s1 = peg$c95;\n                        peg$currPos++;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c96); }\n                      }\n                      if (s1 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c81();\n                      }\n                      s0 = s1;\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 8264) {\n                          s1 = peg$c97;\n                          peg$currPos++;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c98); }\n                        }\n                        if (s1 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c84();\n                        }\n                        s0 = s1;\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$currPos;\n                          if (input.charCodeAt(peg$currPos) === 9633) {\n                            s1 = peg$c99;\n                            peg$currPos++;\n                          } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c100); }\n                          }\n                          if (s1 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c101();\n                          }\n                          s0 = s1;\n                          if (s0 === peg$FAILED) {\n                            s0 = peg$currPos;\n                            if (input.charCodeAt(peg$currPos) === 61) {\n                              s1 = peg$c66;\n                              peg$currPos++;\n                            } else {\n                              s1 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c67); }\n                            }\n                            if (s1 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c102();\n                            }\n                            s0 = s1;\n                            if (s0 === peg$FAILED) {\n                              s0 = peg$currPos;\n                              if (input.charCodeAt(peg$currPos) === 8734) {\n                                s1 = peg$c103;\n                                peg$currPos++;\n                              } else {\n                                s1 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c104); }\n                              }\n                              if (s1 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c105();\n                              }\n                              s0 = s1;\n                              if (s0 === peg$FAILED) {\n                                s0 = peg$currPos;\n                                if (input.charCodeAt(peg$currPos) === 10866) {\n                                  s1 = peg$c106;\n                                  peg$currPos++;\n                                } else {\n                                  s1 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c107); }\n                                }\n                                if (s1 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c108();\n                                }\n                                s0 = s1;\n                                if (s0 === peg$FAILED) {\n                                  s0 = peg$currPos;\n                                  if (input.charCodeAt(peg$currPos) === 10865) {\n                                    s1 = peg$c109;\n                                    peg$currPos++;\n                                  } else {\n                                    s1 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c110); }\n                                  }\n                                  if (s1 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c111();\n                                  }\n                                  s0 = s1;\n                                  if (s0 === peg$FAILED) {\n                                    s0 = peg$currPos;\n                                    if (input.charCodeAt(peg$currPos) === 177) {\n                                      s1 = peg$c112;\n                                      peg$currPos++;\n                                    } else {\n                                      s1 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c113); }\n                                    }\n                                    if (s1 !== peg$FAILED) {\n                                      peg$savedPos = s0;\n                                      s1 = peg$c114();\n                                    }\n                                    s0 = s1;\n                                    if (s0 === peg$FAILED) {\n                                      s0 = peg$currPos;\n                                      if (input.charCodeAt(peg$currPos) === 8723) {\n                                        s1 = peg$c115;\n                                        peg$currPos++;\n                                      } else {\n                                        s1 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c116); }\n                                      }\n                                      if (s1 !== peg$FAILED) {\n                                        peg$savedPos = s0;\n                                        s1 = peg$c117();\n                                      }\n                                      s0 = s1;\n                                      if (s0 === peg$FAILED) {\n                                        s0 = peg$currPos;\n                                        if (input.substr(peg$currPos, 2) === peg$c57) {\n                                          s1 = peg$c57;\n                                          peg$currPos += 2;\n                                        } else {\n                                          s1 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c58); }\n                                        }\n                                        if (s1 !== peg$FAILED) {\n                                          peg$savedPos = s0;\n                                          s1 = peg$c118();\n                                        }\n                                        s0 = s1;\n                                        if (s0 === peg$FAILED) {\n                                          s0 = peg$currPos;\n                                          if (input.substr(peg$currPos, 2) === peg$c119) {\n                                            s1 = peg$c119;\n                                            peg$currPos += 2;\n                                          } else {\n                                            s1 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c120); }\n                                          }\n                                          if (s1 !== peg$FAILED) {\n                                            peg$savedPos = s0;\n                                            s1 = peg$c121();\n                                          }\n                                          s0 = s1;\n                                          if (s0 === peg$FAILED) {\n                                            s0 = peg$currPos;\n                                            if (input.charCodeAt(peg$currPos) === 10752) {\n                                              s1 = peg$c122;\n                                              peg$currPos++;\n                                            } else {\n                                              s1 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c123); }\n                                            }\n                                            if (s1 !== peg$FAILED) {\n                                              peg$savedPos = s0;\n                                              s1 = peg$c124();\n                                            }\n                                            s0 = s1;\n                                            if (s0 === peg$FAILED) {\n                                              s0 = peg$currPos;\n                                              if (input.charCodeAt(peg$currPos) === 10227) {\n                                                s1 = peg$c125;\n                                                peg$currPos++;\n                                              } else {\n                                                s1 = peg$FAILED;\n                                                if (peg$silentFails === 0) { peg$fail(peg$c126); }\n                                              }\n                                              if (s1 !== peg$FAILED) {\n                                                peg$savedPos = s0;\n                                                s1 = peg$c127();\n                                              }\n                                              s0 = s1;\n                                              if (s0 === peg$FAILED) {\n                                                s0 = peg$currPos;\n                                                if (input.charCodeAt(peg$currPos) === 8594) {\n                                                  s1 = peg$c128;\n                                                  peg$currPos++;\n                                                } else {\n                                                  s1 = peg$FAILED;\n                                                  if (peg$silentFails === 0) { peg$fail(peg$c129); }\n                                                }\n                                                if (s1 !== peg$FAILED) {\n                                                  peg$savedPos = s0;\n                                                  s1 = peg$c130();\n                                                }\n                                                s0 = s1;\n                                                if (s0 === peg$FAILED) {\n                                                  s0 = peg$currPos;\n                                                  if (input.charCodeAt(peg$currPos) === 8593) {\n                                                    s1 = peg$c131;\n                                                    peg$currPos++;\n                                                  } else {\n                                                    s1 = peg$FAILED;\n                                                    if (peg$silentFails === 0) { peg$fail(peg$c132); }\n                                                  }\n                                                  if (s1 !== peg$FAILED) {\n                                                    peg$savedPos = s0;\n                                                    s1 = peg$c133();\n                                                  }\n                                                  s0 = s1;\n                                                  if (s0 === peg$FAILED) {\n                                                    s0 = peg$currPos;\n                                                    if (input.charCodeAt(peg$currPos) === 8646) {\n                                                      s1 = peg$c134;\n                                                      peg$currPos++;\n                                                    } else {\n                                                      s1 = peg$FAILED;\n                                                      if (peg$silentFails === 0) { peg$fail(peg$c135); }\n                                                    }\n                                                    if (s1 !== peg$FAILED) {\n                                                      peg$savedPos = s0;\n                                                      s1 = peg$c136();\n                                                    }\n                                                    s0 = s1;\n                                                    if (s0 === peg$FAILED) {\n                                                      s0 = peg$currPos;\n                                                      if (input.charCodeAt(peg$currPos) === 68) {\n                                                        s1 = peg$c137;\n                                                        peg$currPos++;\n                                                      } else {\n                                                        s1 = peg$FAILED;\n                                                        if (peg$silentFails === 0) { peg$fail(peg$c138); }\n                                                      }\n                                                      if (s1 !== peg$FAILED) {\n                                                        peg$savedPos = s0;\n                                                        s1 = peg$c139();\n                                                      }\n                                                      s0 = s1;\n                                                    }\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsediscriminator() {\n    var s0;\n\n    s0 = peg$parsecolumn();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parserow();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecheckdisc() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parsediscriminator();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsestrike();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parserow();\n          if (s4 !== peg$FAILED) {\n            s1 = [s1, s2, s3, s4];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemoveEllipse() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseinteger();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s3 = peg$c38;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c39); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (input.charCodeAt(peg$currPos) === 46) {\n            s3 = peg$c38;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c39); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c40(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefigure() {\n    var s0;\n\n    if (peg$c140.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c141); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn() {\n    var s0;\n\n    if (peg$c142.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c143); }\n    }\n\n    return s0;\n  }\n\n  function peg$parserow() {\n    var s0;\n\n    if (peg$c144.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c145); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestrike() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 120) {\n      s0 = peg$c146;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c147); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestrikeOrDash() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 120) {\n      s0 = peg$c146;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c147); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s0 = peg$c148;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c149); }\n      }\n    }\n\n    return s0;\n  }\n\n\n      function makeInteger(o) {\n          return parseInt(o.join(\"\"), 10);\n      }\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n/*\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n*/\nexport class pgnParser {\n  static parse(history, options) {\n    return peg$parse(history, options)\n  }\n}","/*\n * Copyright (c) 2020, Jeff Hlywa (jhlywa@gmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *\n *----------------------------------------------------------------------------*/\n\n/* minified license below  */\n\n/* @license\n * Copyright (c) 2018, Jeff Hlywa (jhlywa@gmail.com)\n * Released under the BSD license\n * https://github.com/jhlywa/chess.js/blob/master/LICENSE\n */\n\nvar Chess = function(fen) {\n    var BLACK = 'b'\n    var WHITE = 'w'\n\n    var EMPTY = -1\n\n    var PAWN = 'p'\n    var KNIGHT = 'n'\n    var BISHOP = 'b'\n    var ROOK = 'r'\n    var QUEEN = 'q'\n    var KING = 'k'\n\n    var SYMBOLS = 'pnbrqkPNBRQK'\n\n    var DEFAULT_POSITION =\n        'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\n\n    var POSSIBLE_RESULTS = ['1-0', '0-1', '1/2-1/2', '*']\n\n    var PAWN_OFFSETS = {\n        b: [16, 32, 17, 15],\n        w: [-16, -32, -17, -15]\n    }\n\n    var PIECE_OFFSETS = {\n        n: [-18, -33, -31, -14, 18, 33, 31, 14],\n        b: [-17, -15, 17, 15],\n        r: [-16, 1, 16, -1],\n        q: [-17, -16, -15, 1, 17, 16, 15, -1],\n        k: [-17, -16, -15, 1, 17, 16, 15, -1]\n    }\n\n    // prettier-ignore\n    var ATTACKS = [\n        20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20, 0,\n        0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\n        0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\n        0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\n        0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n        24,24,24,24,24,24,56,  0, 56,24,24,24,24,24,24, 0,\n        0, 0, 0, 0, 0, 2,53, 56, 53, 2, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0,20, 2, 24,  2,20, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0,20, 0, 0, 24,  0, 0,20, 0, 0, 0, 0, 0,\n        0, 0, 0,20, 0, 0, 0, 24,  0, 0, 0,20, 0, 0, 0, 0,\n        0, 0,20, 0, 0, 0, 0, 24,  0, 0, 0, 0,20, 0, 0, 0,\n        0,20, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0,20, 0, 0,\n        20, 0, 0, 0, 0, 0, 0, 24,  0, 0, 0, 0, 0, 0,20\n    ];\n\n    // prettier-ignore\n    var RAYS = [\n        17,  0,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0,  0, 15, 0,\n        0, 17,  0,  0,  0,  0,  0, 16,  0,  0,  0,  0,  0, 15,  0, 0,\n        0,  0, 17,  0,  0,  0,  0, 16,  0,  0,  0,  0, 15,  0,  0, 0,\n        0,  0,  0, 17,  0,  0,  0, 16,  0,  0,  0, 15,  0,  0,  0, 0,\n        0,  0,  0,  0, 17,  0,  0, 16,  0,  0, 15,  0,  0,  0,  0, 0,\n        0,  0,  0,  0,  0, 17,  0, 16,  0, 15,  0,  0,  0,  0,  0, 0,\n        0,  0,  0,  0,  0,  0, 17, 16, 15,  0,  0,  0,  0,  0,  0, 0,\n        1,  1,  1,  1,  1,  1,  1,  0, -1, -1,  -1,-1, -1, -1, -1, 0,\n        0,  0,  0,  0,  0,  0,-15,-16,-17,  0,  0,  0,  0,  0,  0, 0,\n        0,  0,  0,  0,  0,-15,  0,-16,  0,-17,  0,  0,  0,  0,  0, 0,\n        0,  0,  0,  0,-15,  0,  0,-16,  0,  0,-17,  0,  0,  0,  0, 0,\n        0,  0,  0,-15,  0,  0,  0,-16,  0,  0,  0,-17,  0,  0,  0, 0,\n        0,  0,-15,  0,  0,  0,  0,-16,  0,  0,  0,  0,-17,  0,  0, 0,\n        0,-15,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,-17,  0, 0,\n        -15,  0,  0,  0,  0,  0,  0,-16,  0,  0,  0,  0,  0,  0,-17\n    ];\n\n    var SHIFTS = { p: 0, n: 1, b: 2, r: 3, q: 4, k: 5 }\n\n    var FLAGS = {\n        NORMAL: 'n',\n        CAPTURE: 'c',\n        BIG_PAWN: 'b',\n        EP_CAPTURE: 'e',\n        PROMOTION: 'p',\n        KSIDE_CASTLE: 'k',\n        QSIDE_CASTLE: 'q'\n    }\n\n    var BITS = {\n        NORMAL: 1,\n        CAPTURE: 2,\n        BIG_PAWN: 4,\n        EP_CAPTURE: 8,\n        PROMOTION: 16,\n        KSIDE_CASTLE: 32,\n        QSIDE_CASTLE: 64\n    }\n\n    var RANK_1 = 7\n    var RANK_2 = 6\n    var RANK_3 = 5\n    var RANK_4 = 4\n    var RANK_5 = 3\n    var RANK_6 = 2\n    var RANK_7 = 1\n    var RANK_8 = 0\n\n    // prettier-ignore\n    var SQUARES = {\n        a8:   0, b8:   1, c8:   2, d8:   3, e8:   4, f8:   5, g8:   6, h8:   7,\n        a7:  16, b7:  17, c7:  18, d7:  19, e7:  20, f7:  21, g7:  22, h7:  23,\n        a6:  32, b6:  33, c6:  34, d6:  35, e6:  36, f6:  37, g6:  38, h6:  39,\n        a5:  48, b5:  49, c5:  50, d5:  51, e5:  52, f5:  53, g5:  54, h5:  55,\n        a4:  64, b4:  65, c4:  66, d4:  67, e4:  68, f4:  69, g4:  70, h4:  71,\n        a3:  80, b3:  81, c3:  82, d3:  83, e3:  84, f3:  85, g3:  86, h3:  87,\n        a2:  96, b2:  97, c2:  98, d2:  99, e2: 100, f2: 101, g2: 102, h2: 103,\n        a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\n    };\n\n    var ROOKS = {\n        w: [\n            { square: SQUARES.a1, flag: BITS.QSIDE_CASTLE },\n            { square: SQUARES.h1, flag: BITS.KSIDE_CASTLE }\n        ],\n        b: [\n            { square: SQUARES.a8, flag: BITS.QSIDE_CASTLE },\n            { square: SQUARES.h8, flag: BITS.KSIDE_CASTLE }\n        ]\n    }\n\n    var board = new Array(128)\n    var kings = { w: EMPTY, b: EMPTY }\n    var turn = WHITE\n    var castling = { w: 0, b: 0 }\n    var ep_square = EMPTY\n    var half_moves = 0\n    var move_number = 1\n    var history = []\n    var header = {}\n\n    /* if the user passes in a fen string, load it, else default to\n     * starting position\n     */\n    if (typeof fen === 'undefined') {\n        load(DEFAULT_POSITION)\n    } else {\n        load(fen)\n    }\n\n    function clear(keep_headers) {\n        if (typeof keep_headers === 'undefined') {\n            keep_headers = false\n        }\n\n        board = new Array(128)\n        kings = { w: EMPTY, b: EMPTY }\n        turn = WHITE\n        castling = { w: 0, b: 0 }\n        ep_square = EMPTY\n        half_moves = 0\n        move_number = 1\n        history = []\n        if (!keep_headers) header = {}\n        update_setup(generate_fen())\n    }\n\n    function reset() {\n        load(DEFAULT_POSITION)\n    }\n\n    function load(fen, keep_headers) {\n        if (typeof keep_headers === 'undefined') {\n            keep_headers = false\n        }\n\n        var tokens = fen.split(/\\s+/)\n        var position = tokens[0]\n        var square = 0\n\n        if (!validate_fen(fen).valid) {\n            return false\n        }\n\n        clear(keep_headers)\n\n        for (var i = 0; i < position.length; i++) {\n            var piece = position.charAt(i)\n\n            if (piece === '/') {\n                square += 8\n            } else if (is_digit(piece)) {\n                square += parseInt(piece, 10)\n            } else {\n                var color = piece < 'a' ? WHITE : BLACK\n                put({ type: piece.toLowerCase(), color: color }, algebraic(square))\n                square++\n            }\n        }\n\n        turn = tokens[1]\n\n        if (tokens[2].indexOf('K') > -1) {\n            castling.w |= BITS.KSIDE_CASTLE\n        }\n        if (tokens[2].indexOf('Q') > -1) {\n            castling.w |= BITS.QSIDE_CASTLE\n        }\n        if (tokens[2].indexOf('k') > -1) {\n            castling.b |= BITS.KSIDE_CASTLE\n        }\n        if (tokens[2].indexOf('q') > -1) {\n            castling.b |= BITS.QSIDE_CASTLE\n        }\n\n        ep_square = tokens[3] === '-' ? EMPTY : SQUARES[tokens[3]]\n        half_moves = parseInt(tokens[4], 10)\n        move_number = parseInt(tokens[5], 10)\n\n        update_setup(generate_fen())\n\n        return true\n    }\n\n    /* TODO: this function is pretty much crap - it validates structure but\n     * completely ignores content (e.g. doesn't verify that each side has a king)\n     * ... we should rewrite this, and ditch the silly error_number field while\n     * we're at it\n     */\n    function validate_fen(fen) {\n        var errors = {\n            0: 'No errors.',\n            1: 'FEN string must contain six space-delimited fields.',\n            2: '6th field (move number) must be a positive integer.',\n            3: '5th field (half move counter) must be a non-negative integer.',\n            4: '4th field (en-passant square) is invalid.',\n            5: '3rd field (castling availability) is invalid.',\n            6: '2nd field (side to move) is invalid.',\n            7: \"1st field (piece positions) does not contain 8 '/'-delimited rows.\",\n            8: '1st field (piece positions) is invalid [consecutive numbers].',\n            9: '1st field (piece positions) is invalid [invalid piece].',\n            10: '1st field (piece positions) is invalid [row too large].',\n            11: 'Illegal en-passant square'\n        }\n\n        /* 1st criterion: 6 space-seperated fields? */\n        var tokens = fen.split(/\\s+/)\n        if (tokens.length !== 6) {\n            return { valid: false, error_number: 1, error: errors[1] }\n        }\n\n        /* 2nd criterion: move number field is a integer value > 0? */\n        if (isNaN(tokens[5]) || parseInt(tokens[5], 10) <= 0) {\n            return { valid: false, error_number: 2, error: errors[2] }\n        }\n\n        /* 3rd criterion: half move counter is an integer >= 0? */\n        if (isNaN(tokens[4]) || parseInt(tokens[4], 10) < 0) {\n            return { valid: false, error_number: 3, error: errors[3] }\n        }\n\n        /* 4th criterion: 4th field is a valid e.p.-string? */\n        if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\n            return { valid: false, error_number: 4, error: errors[4] }\n        }\n\n        /* 5th criterion: 3th field is a valid castle-string? */\n        if (!/^(KQ?k?q?|Qk?q?|kq?|q|-)$/.test(tokens[2])) {\n            return { valid: false, error_number: 5, error: errors[5] }\n        }\n\n        /* 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)? */\n        if (!/^(w|b)$/.test(tokens[1])) {\n            return { valid: false, error_number: 6, error: errors[6] }\n        }\n\n        /* 7th criterion: 1st field contains 8 rows? */\n        var rows = tokens[0].split('/')\n        if (rows.length !== 8) {\n            return { valid: false, error_number: 7, error: errors[7] }\n        }\n\n        /* 8th criterion: every row is valid? */\n        for (var i = 0; i < rows.length; i++) {\n            /* check for right sum of fields AND not two numbers in succession */\n            var sum_fields = 0\n            var previous_was_number = false\n\n            for (var k = 0; k < rows[i].length; k++) {\n                if (!isNaN(rows[i][k])) {\n                    if (previous_was_number) {\n                        return { valid: false, error_number: 8, error: errors[8] }\n                    }\n                    sum_fields += parseInt(rows[i][k], 10)\n                    previous_was_number = true\n                } else {\n                    if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\n                        return { valid: false, error_number: 9, error: errors[9] }\n                    }\n                    sum_fields += 1\n                    previous_was_number = false\n                }\n            }\n            if (sum_fields !== 8) {\n                return { valid: false, error_number: 10, error: errors[10] }\n            }\n        }\n\n        if (\n            (tokens[3][1] == '3' && tokens[1] == 'w') ||\n            (tokens[3][1] == '6' && tokens[1] == 'b')\n        ) {\n            return { valid: false, error_number: 11, error: errors[11] }\n        }\n\n        /* everything's okay! */\n        return { valid: true, error_number: 0, error: errors[0] }\n    }\n\n    function generate_fen() {\n        var empty = 0\n        var fen = ''\n\n        for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n            if (board[i] == null) {\n                empty++\n            } else {\n                if (empty > 0) {\n                    fen += empty\n                    empty = 0\n                }\n                var color = board[i].color\n                var piece = board[i].type\n\n                fen += color === WHITE ? piece.toUpperCase() : piece.toLowerCase()\n            }\n\n            if ((i + 1) & 0x88) {\n                if (empty > 0) {\n                    fen += empty\n                }\n\n                if (i !== SQUARES.h1) {\n                    fen += '/'\n                }\n\n                empty = 0\n                i += 8\n            }\n        }\n\n        var cflags = ''\n        if (castling[WHITE] & BITS.KSIDE_CASTLE) {\n            cflags += 'K'\n        }\n        if (castling[WHITE] & BITS.QSIDE_CASTLE) {\n            cflags += 'Q'\n        }\n        if (castling[BLACK] & BITS.KSIDE_CASTLE) {\n            cflags += 'k'\n        }\n        if (castling[BLACK] & BITS.QSIDE_CASTLE) {\n            cflags += 'q'\n        }\n\n        /* do we have an empty castling flag? */\n        cflags = cflags || '-'\n        var epflags = ep_square === EMPTY ? '-' : algebraic(ep_square)\n\n        return [fen, turn, cflags, epflags, half_moves, move_number].join(' ')\n    }\n\n    function set_header(args) {\n        for (var i = 0; i < args.length; i += 2) {\n            if (typeof args[i] === 'string' && typeof args[i + 1] === 'string') {\n                header[args[i]] = args[i + 1]\n            }\n        }\n        return header\n    }\n\n    /* called when the initial board setup is changed with put() or remove().\n     * modifies the SetUp and FEN properties of the header object.  if the FEN is\n     * equal to the default position, the SetUp and FEN are deleted\n     * the setup is only updated if history.length is zero, ie moves haven't been\n     * made.\n     */\n    function update_setup(fen) {\n        if (history.length > 0) return\n\n        if (fen !== DEFAULT_POSITION) {\n            header['SetUp'] = '1'\n            header['FEN'] = fen\n        } else {\n            delete header['SetUp']\n            delete header['FEN']\n        }\n    }\n\n    function get(square) {\n        var piece = board[SQUARES[square]]\n        return piece ? { type: piece.type, color: piece.color } : null\n    }\n\n    function put(piece, square) {\n        /* check for valid piece object */\n        if (!('type' in piece && 'color' in piece)) {\n            return false\n        }\n\n        /* check for piece */\n        if (SYMBOLS.indexOf(piece.type.toLowerCase()) === -1) {\n            return false\n        }\n\n        /* check for valid square */\n        if (!(square in SQUARES)) {\n            return false\n        }\n\n        var sq = SQUARES[square]\n\n        /* don't let the user place more than one king */\n        if (\n            piece.type == KING &&\n            !(kings[piece.color] == EMPTY || kings[piece.color] == sq)\n        ) {\n            return false\n        }\n\n        board[sq] = { type: piece.type, color: piece.color }\n        if (piece.type === KING) {\n            kings[piece.color] = sq\n        }\n\n        update_setup(generate_fen())\n\n        return true\n    }\n\n    function remove(square) {\n        var piece = get(square)\n        board[SQUARES[square]] = null\n        if (piece && piece.type === KING) {\n            kings[piece.color] = EMPTY\n        }\n\n        update_setup(generate_fen())\n\n        return piece\n    }\n\n    function build_move(board, from, to, flags, promotion) {\n        var move = {\n            color: turn,\n            from: from,\n            to: to,\n            flags: flags,\n            piece: board[from].type\n        }\n\n        if (promotion) {\n            move.flags |= BITS.PROMOTION\n            move.promotion = promotion\n        }\n\n        if (board[to]) {\n            move.captured = board[to].type\n        } else if (flags & BITS.EP_CAPTURE) {\n            move.captured = PAWN\n        }\n        return move\n    }\n\n    function generate_moves(options) {\n        function add_move(board, moves, from, to, flags) {\n            /* if pawn promotion */\n            if (\n                board[from].type === PAWN &&\n                (rank(to) === RANK_8 || rank(to) === RANK_1)\n            ) {\n                var pieces = [QUEEN, ROOK, BISHOP, KNIGHT]\n                for (var i = 0, len = pieces.length; i < len; i++) {\n                    moves.push(build_move(board, from, to, flags, pieces[i]))\n                }\n            } else {\n                moves.push(build_move(board, from, to, flags))\n            }\n        }\n\n        var moves = []\n        var us = turn\n        var them = swap_color(us)\n        var second_rank = { b: RANK_7, w: RANK_2 }\n\n        var first_sq = SQUARES.a8\n        var last_sq = SQUARES.h1\n        var single_square = false\n\n        /* do we want legal moves? */\n        var legal =\n            typeof options !== 'undefined' && 'legal' in options\n                ? options.legal\n                : true\n\n        /* are we generating moves for a single square? */\n        if (typeof options !== 'undefined' && 'square' in options) {\n            if (options.square in SQUARES) {\n                first_sq = last_sq = SQUARES[options.square]\n                single_square = true\n            } else {\n                /* invalid square */\n                return []\n            }\n        }\n\n        for (var i = first_sq; i <= last_sq; i++) {\n            /* did we run off the end of the board */\n            if (i & 0x88) {\n                i += 7\n                continue\n            }\n\n            var piece = board[i]\n            if (piece == null || piece.color !== us) {\n                continue\n            }\n\n            if (piece.type === PAWN) {\n                /* single square, non-capturing */\n                var square = i + PAWN_OFFSETS[us][0]\n                if (board[square] == null) {\n                    add_move(board, moves, i, square, BITS.NORMAL)\n\n                    /* double square */\n                    var square = i + PAWN_OFFSETS[us][1]\n                    if (second_rank[us] === rank(i) && board[square] == null) {\n                        add_move(board, moves, i, square, BITS.BIG_PAWN)\n                    }\n                }\n\n                /* pawn captures */\n                for (j = 2; j < 4; j++) {\n                    var square = i + PAWN_OFFSETS[us][j]\n                    if (square & 0x88) continue\n\n                    if (board[square] != null && board[square].color === them) {\n                        add_move(board, moves, i, square, BITS.CAPTURE)\n                    } else if (square === ep_square) {\n                        add_move(board, moves, i, ep_square, BITS.EP_CAPTURE)\n                    }\n                }\n            } else {\n                for (var j = 0, len = PIECE_OFFSETS[piece.type].length; j < len; j++) {\n                    var offset = PIECE_OFFSETS[piece.type][j]\n                    var square = i\n\n                    while (true) {\n                        square += offset\n                        if (square & 0x88) break\n\n                        if (board[square] == null) {\n                            add_move(board, moves, i, square, BITS.NORMAL)\n                        } else {\n                            if (board[square].color === us) break\n                            add_move(board, moves, i, square, BITS.CAPTURE)\n                            break\n                        }\n\n                        /* break, if knight or king */\n                        if (piece.type === 'n' || piece.type === 'k') break\n                    }\n                }\n            }\n        }\n\n        /* check for castling if: a) we're generating all moves, or b) we're doing\n         * single square move generation on the king's square\n         */\n        if (!single_square || last_sq === kings[us]) {\n            /* king-side castling */\n            if (castling[us] & BITS.KSIDE_CASTLE) {\n                var castling_from = kings[us]\n                var castling_to = castling_from + 2\n\n                if (\n                    board[castling_from + 1] == null &&\n                    board[castling_to] == null &&\n                    !attacked(them, kings[us]) &&\n                    !attacked(them, castling_from + 1) &&\n                    !attacked(them, castling_to)\n                ) {\n                    add_move(board, moves, kings[us], castling_to, BITS.KSIDE_CASTLE)\n                }\n            }\n\n            /* queen-side castling */\n            if (castling[us] & BITS.QSIDE_CASTLE) {\n                var castling_from = kings[us]\n                var castling_to = castling_from - 2\n\n                if (\n                    board[castling_from - 1] == null &&\n                    board[castling_from - 2] == null &&\n                    board[castling_from - 3] == null &&\n                    !attacked(them, kings[us]) &&\n                    !attacked(them, castling_from - 1) &&\n                    !attacked(them, castling_to)\n                ) {\n                    add_move(board, moves, kings[us], castling_to, BITS.QSIDE_CASTLE)\n                }\n            }\n        }\n\n        /* return all pseudo-legal moves (this includes moves that allow the king\n         * to be captured)\n         */\n        if (!legal) {\n            return moves\n        }\n\n        /* filter out illegal moves */\n        var legal_moves = []\n        for (var i = 0, len = moves.length; i < len; i++) {\n            make_move(moves[i])\n            if (!king_attacked(us)) {\n                legal_moves.push(moves[i])\n            }\n            undo_move()\n        }\n\n        return legal_moves\n    }\n\n    /* convert a move from 0x88 coordinates to Standard Algebraic Notation\n     * (SAN)\n     *\n     * @param {boolean} sloppy Use the sloppy SAN generator to work around over\n     * disambiguation bugs in Fritz and Chessbase.  See below:\n     *\n     * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\n     * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\n     * 4. ... Ne7 is technically the valid SAN\n     */\n    function move_to_san(move, sloppy) {\n        var output = ''\n\n        if (move.flags & BITS.KSIDE_CASTLE) {\n            output = 'O-O'\n        } else if (move.flags & BITS.QSIDE_CASTLE) {\n            output = 'O-O-O'\n        } else {\n            var disambiguator = get_disambiguator(move, sloppy)\n\n            if (move.piece !== PAWN) {\n                output += move.piece.toUpperCase() + disambiguator\n            }\n\n            if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n                if (move.piece === PAWN) {\n                    output += algebraic(move.from)[0]\n                }\n                output += 'x'\n            }\n\n            output += algebraic(move.to)\n\n            if (move.flags & BITS.PROMOTION) {\n                output += '=' + move.promotion.toUpperCase()\n            }\n        }\n\n        make_move(move)\n        if (in_check()) {\n            if (in_checkmate()) {\n                output += '#'\n            } else {\n                output += '+'\n            }\n        }\n        undo_move()\n\n        return output\n    }\n\n    // parses all of the decorators out of a SAN string\n    function stripped_san(move) {\n        return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '')\n    }\n\n    function attacked(color, square) {\n        for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n            /* did we run off the end of the board */\n            if (i & 0x88) {\n                i += 7\n                continue\n            }\n\n            /* if empty square or wrong color */\n            if (board[i] == null || board[i].color !== color) continue\n\n            var piece = board[i]\n            var difference = i - square\n            var index = difference + 119\n\n            if (ATTACKS[index] & (1 << SHIFTS[piece.type])) {\n                if (piece.type === PAWN) {\n                    if (difference > 0) {\n                        if (piece.color === WHITE) return true\n                    } else {\n                        if (piece.color === BLACK) return true\n                    }\n                    continue\n                }\n\n                /* if the piece is a knight or a king */\n                if (piece.type === 'n' || piece.type === 'k') return true\n\n                var offset = RAYS[index]\n                var j = i + offset\n\n                var blocked = false\n                while (j !== square) {\n                    if (board[j] != null) {\n                        blocked = true\n                        break\n                    }\n                    j += offset\n                }\n\n                if (!blocked) return true\n            }\n        }\n\n        return false\n    }\n\n    function king_attacked(color) {\n        return attacked(swap_color(color), kings[color])\n    }\n\n    function in_check() {\n        return king_attacked(turn)\n    }\n\n    function in_checkmate() {\n        return in_check() && generate_moves().length === 0\n    }\n\n    function in_stalemate() {\n        return !in_check() && generate_moves().length === 0\n    }\n\n    function insufficient_material() {\n        var pieces = {}\n        var bishops = []\n        var num_pieces = 0\n        var sq_color = 0\n\n        for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n            sq_color = (sq_color + 1) % 2\n            if (i & 0x88) {\n                i += 7\n                continue\n            }\n\n            var piece = board[i]\n            if (piece) {\n                pieces[piece.type] = piece.type in pieces ? pieces[piece.type] + 1 : 1\n                if (piece.type === BISHOP) {\n                    bishops.push(sq_color)\n                }\n                num_pieces++\n            }\n        }\n\n        /* k vs. k */\n        if (num_pieces === 2) {\n            return true\n        } else if (\n            /* k vs. kn .... or .... k vs. kb */\n            num_pieces === 3 &&\n            (pieces[BISHOP] === 1 || pieces[KNIGHT] === 1)\n        ) {\n            return true\n        } else if (num_pieces === pieces[BISHOP] + 2) {\n            /* kb vs. kb where any number of bishops are all on the same color */\n            var sum = 0\n            var len = bishops.length\n            for (var i = 0; i < len; i++) {\n                sum += bishops[i]\n            }\n            if (sum === 0 || sum === len) {\n                return true\n            }\n        }\n\n        return false\n    }\n\n    function in_threefold_repetition() {\n        /* TODO: while this function is fine for casual use, a better\n         * implementation would use a Zobrist key (instead of FEN). the\n         * Zobrist key would be maintained in the make_move/undo_move functions,\n         * avoiding the costly that we do below.\n         */\n        var moves = []\n        var positions = {}\n        var repetition = false\n\n        while (true) {\n            var move = undo_move()\n            if (!move) break\n            moves.push(move)\n        }\n\n        while (true) {\n            /* remove the last two fields in the FEN string, they're not needed\n             * when checking for draw by rep */\n            var fen = generate_fen()\n                .split(' ')\n                .slice(0, 4)\n                .join(' ')\n\n            /* has the position occurred three or move times */\n            positions[fen] = fen in positions ? positions[fen] + 1 : 1\n            if (positions[fen] >= 3) {\n                repetition = true\n            }\n\n            if (!moves.length) {\n                break\n            }\n            make_move(moves.pop())\n        }\n\n        return repetition\n    }\n\n    function push(move) {\n        history.push({\n            move: move,\n            kings: { b: kings.b, w: kings.w },\n            turn: turn,\n            castling: { b: castling.b, w: castling.w },\n            ep_square: ep_square,\n            half_moves: half_moves,\n            move_number: move_number\n        })\n    }\n\n    function make_move(move) {\n        var us = turn\n        var them = swap_color(us)\n        push(move)\n\n        board[move.to] = board[move.from]\n        board[move.from] = null\n\n        /* if ep capture, remove the captured pawn */\n        if (move.flags & BITS.EP_CAPTURE) {\n            if (turn === BLACK) {\n                board[move.to - 16] = null\n            } else {\n                board[move.to + 16] = null\n            }\n        }\n\n        /* if pawn promotion, replace with new piece */\n        if (move.flags & BITS.PROMOTION) {\n            board[move.to] = { type: move.promotion, color: us }\n        }\n\n        /* if we moved the king */\n        if (board[move.to].type === KING) {\n            kings[board[move.to].color] = move.to\n\n            /* if we castled, move the rook next to the king */\n            if (move.flags & BITS.KSIDE_CASTLE) {\n                var castling_to = move.to - 1\n                var castling_from = move.to + 1\n                board[castling_to] = board[castling_from]\n                board[castling_from] = null\n            } else if (move.flags & BITS.QSIDE_CASTLE) {\n                var castling_to = move.to + 1\n                var castling_from = move.to - 2\n                board[castling_to] = board[castling_from]\n                board[castling_from] = null\n            }\n\n            /* turn off castling */\n            castling[us] = ''\n        }\n\n        /* turn off castling if we move a rook */\n        if (castling[us]) {\n            for (var i = 0, len = ROOKS[us].length; i < len; i++) {\n                if (\n                    move.from === ROOKS[us][i].square &&\n                    castling[us] & ROOKS[us][i].flag\n                ) {\n                    castling[us] ^= ROOKS[us][i].flag\n                    break\n                }\n            }\n        }\n\n        /* turn off castling if we capture a rook */\n        if (castling[them]) {\n            for (var i = 0, len = ROOKS[them].length; i < len; i++) {\n                if (\n                    move.to === ROOKS[them][i].square &&\n                    castling[them] & ROOKS[them][i].flag\n                ) {\n                    castling[them] ^= ROOKS[them][i].flag\n                    break\n                }\n            }\n        }\n\n        /* if big pawn move, update the en passant square */\n        if (move.flags & BITS.BIG_PAWN) {\n            if (turn === 'b') {\n                ep_square = move.to - 16\n            } else {\n                ep_square = move.to + 16\n            }\n        } else {\n            ep_square = EMPTY\n        }\n\n        /* reset the 50 move counter if a pawn is moved or a piece is captured */\n        if (move.piece === PAWN) {\n            half_moves = 0\n        } else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n            half_moves = 0\n        } else {\n            half_moves++\n        }\n\n        if (turn === BLACK) {\n            move_number++\n        }\n        turn = swap_color(turn)\n    }\n\n    function undo_move() {\n        var old = history.pop()\n        if (old == null) {\n            return null\n        }\n\n        var move = old.move\n        kings = old.kings\n        turn = old.turn\n        castling = old.castling\n        ep_square = old.ep_square\n        half_moves = old.half_moves\n        move_number = old.move_number\n\n        var us = turn\n        var them = swap_color(turn)\n\n        board[move.from] = board[move.to]\n        board[move.from].type = move.piece // to undo any promotions\n        board[move.to] = null\n\n        if (move.flags & BITS.CAPTURE) {\n            board[move.to] = { type: move.captured, color: them }\n        } else if (move.flags & BITS.EP_CAPTURE) {\n            var index\n            if (us === BLACK) {\n                index = move.to - 16\n            } else {\n                index = move.to + 16\n            }\n            board[index] = { type: PAWN, color: them }\n        }\n\n        if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\n            var castling_to, castling_from\n            if (move.flags & BITS.KSIDE_CASTLE) {\n                castling_to = move.to + 1\n                castling_from = move.to - 1\n            } else if (move.flags & BITS.QSIDE_CASTLE) {\n                castling_to = move.to - 2\n                castling_from = move.to + 1\n            }\n\n            board[castling_to] = board[castling_from]\n            board[castling_from] = null\n        }\n\n        return move\n    }\n\n    /* this function is used to uniquely identify ambiguous moves */\n    function get_disambiguator(move, sloppy) {\n        var moves = generate_moves({ legal: !sloppy })\n\n        var from = move.from\n        var to = move.to\n        var piece = move.piece\n\n        var ambiguities = 0\n        var same_rank = 0\n        var same_file = 0\n\n        for (var i = 0, len = moves.length; i < len; i++) {\n            var ambig_from = moves[i].from\n            var ambig_to = moves[i].to\n            var ambig_piece = moves[i].piece\n\n            /* if a move of the same piece type ends on the same to square, we'll\n             * need to add a disambiguator to the algebraic notation\n             */\n            if (piece === ambig_piece && from !== ambig_from && to === ambig_to) {\n                ambiguities++\n\n                if (rank(from) === rank(ambig_from)) {\n                    same_rank++\n                }\n\n                if (file(from) === file(ambig_from)) {\n                    same_file++\n                }\n            }\n        }\n\n        if (ambiguities > 0) {\n            /* if there exists a similar moving piece on the same rank and file as\n             * the move in question, use the square as the disambiguator\n             */\n            if (same_rank > 0 && same_file > 0) {\n                return algebraic(from)\n            } else if (same_file > 0) {\n                /* if the moving piece rests on the same file, use the rank symbol as the\n                 * disambiguator\n                 */\n                return algebraic(from).charAt(1)\n            } else {\n                /* else use the file symbol */\n                return algebraic(from).charAt(0)\n            }\n        }\n\n        return ''\n    }\n\n    function ascii() {\n        var s = '   +------------------------+\\n'\n        for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n            /* display the rank */\n            if (file(i) === 0) {\n                s += ' ' + '87654321'[rank(i)] + ' |'\n            }\n\n            /* empty piece */\n            if (board[i] == null) {\n                s += ' . '\n            } else {\n                var piece = board[i].type\n                var color = board[i].color\n                var symbol = color === WHITE ? piece.toUpperCase() : piece.toLowerCase()\n                s += ' ' + symbol + ' '\n            }\n\n            if ((i + 1) & 0x88) {\n                s += '|\\n'\n                i += 8\n            }\n        }\n        s += '   +------------------------+\\n'\n        s += '     a  b  c  d  e  f  g  h\\n'\n\n        return s\n    }\n\n    // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\n    function move_from_san(move, sloppy) {\n        // strip off any move decorations: e.g Nf3+?!\n        var clean_move = stripped_san(move)\n\n        // if we're using the sloppy parser run a regex to grab piece, to, and from\n        // this should parse invalid SAN like: Pe2-e4, Rc1c4, Qf3xf7\n        if (sloppy) {\n            var matches = clean_move.match(\n                /([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/\n            )\n            if (matches) {\n                var piece = matches[1]\n                var from = matches[2]\n                var to = matches[3]\n                var promotion = matches[4]\n            }\n        }\n\n        var moves = generate_moves()\n        for (var i = 0, len = moves.length; i < len; i++) {\n            // try the strict parser first, then the sloppy parser if requested\n            // by the user\n            if (\n                clean_move === stripped_san(move_to_san(moves[i])) ||\n                (sloppy && clean_move === stripped_san(move_to_san(moves[i], true)))\n            ) {\n                return moves[i]\n            } else {\n                if (\n                    matches &&\n                    (!piece || piece.toLowerCase() == moves[i].piece) &&\n                    SQUARES[from] == moves[i].from &&\n                    SQUARES[to] == moves[i].to &&\n                    (!promotion || promotion.toLowerCase() == moves[i].promotion)\n                ) {\n                    return moves[i]\n                }\n            }\n        }\n\n        return null\n    }\n\n    /*****************************************************************************\n     * UTILITY FUNCTIONS\n     ****************************************************************************/\n    function rank(i) {\n        return i >> 4\n    }\n\n    function file(i) {\n        return i & 15\n    }\n\n    function algebraic(i) {\n        var f = file(i),\n            r = rank(i)\n        return 'abcdefgh'.substring(f, f + 1) + '87654321'.substring(r, r + 1)\n    }\n\n    function swap_color(c) {\n        return c === WHITE ? BLACK : WHITE\n    }\n\n    function is_digit(c) {\n        return '0123456789'.indexOf(c) !== -1\n    }\n\n    /* pretty = external move object */\n    function make_pretty(ugly_move) {\n        var move = clone(ugly_move)\n        move.san = move_to_san(move, false)\n        move.to = algebraic(move.to)\n        move.from = algebraic(move.from)\n\n        var flags = ''\n\n        for (var flag in BITS) {\n            if (BITS[flag] & move.flags) {\n                flags += FLAGS[flag]\n            }\n        }\n        move.flags = flags\n\n        return move\n    }\n\n    function clone(obj) {\n        var dupe = obj instanceof Array ? [] : {}\n\n        for (var property in obj) {\n            if (typeof property === 'object') {\n                dupe[property] = clone(obj[property])\n            } else {\n                dupe[property] = obj[property]\n            }\n        }\n\n        return dupe\n    }\n\n    function trim(str) {\n        return str.replace(/^\\s+|\\s+$/g, '')\n    }\n\n    /*****************************************************************************\n     * DEBUGGING UTILITIES\n     ****************************************************************************/\n    function perft(depth) {\n        var moves = generate_moves({ legal: false })\n        var nodes = 0\n        var color = turn\n\n        for (var i = 0, len = moves.length; i < len; i++) {\n            make_move(moves[i])\n            if (!king_attacked(color)) {\n                if (depth - 1 > 0) {\n                    var child_nodes = perft(depth - 1)\n                    nodes += child_nodes\n                } else {\n                    nodes++\n                }\n            }\n            undo_move()\n        }\n\n        return nodes\n    }\n\n    return {\n        /***************************************************************************\n         * PUBLIC CONSTANTS (is there a better way to do this?)\n         **************************************************************************/\n        WHITE: WHITE,\n        BLACK: BLACK,\n        PAWN: PAWN,\n        KNIGHT: KNIGHT,\n        BISHOP: BISHOP,\n        ROOK: ROOK,\n        QUEEN: QUEEN,\n        KING: KING,\n        SQUARES: (function() {\n            /* from the ECMA-262 spec (section 12.6.4):\n             * \"The mechanics of enumerating the properties ... is\n             * implementation dependent\"\n             * so: for (var sq in SQUARES) { keys.push(sq); } might not be\n             * ordered correctly\n             */\n            var keys = []\n            for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n                if (i & 0x88) {\n                    i += 7\n                    continue\n                }\n                keys.push(algebraic(i))\n            }\n            return keys\n        })(),\n        FLAGS: FLAGS,\n\n        /***************************************************************************\n         * PUBLIC API\n         **************************************************************************/\n        load: function(fen) {\n            return load(fen)\n        },\n\n        reset: function() {\n            return reset()\n        },\n\n        moves: function(options) {\n            /* The internal representation of a chess move is in 0x88 format, and\n             * not meant to be human-readable.  The code below converts the 0x88\n             * square coordinates to algebraic coordinates.  It also prunes an\n             * unnecessary move keys resulting from a verbose call.\n             */\n\n            var ugly_moves = generate_moves(options)\n            var moves = []\n\n            for (var i = 0, len = ugly_moves.length; i < len; i++) {\n                /* does the user want a full move object (most likely not), or just\n                 * SAN\n                 */\n                if (\n                    typeof options !== 'undefined' &&\n                    'verbose' in options &&\n                    options.verbose\n                ) {\n                    moves.push(make_pretty(ugly_moves[i]))\n                } else {\n                    moves.push(move_to_san(ugly_moves[i], false))\n                }\n            }\n\n            return moves\n        },\n\n        in_check: function() {\n            return in_check()\n        },\n\n        in_checkmate: function() {\n            return in_checkmate()\n        },\n\n        in_stalemate: function() {\n            return in_stalemate()\n        },\n\n        in_draw: function() {\n            return (\n                half_moves >= 100 ||\n                in_stalemate() ||\n                insufficient_material() ||\n                in_threefold_repetition()\n            )\n        },\n\n        insufficient_material: function() {\n            return insufficient_material()\n        },\n\n        in_threefold_repetition: function() {\n            return in_threefold_repetition()\n        },\n\n        game_over: function() {\n            return (\n                half_moves >= 100 ||\n                in_checkmate() ||\n                in_stalemate() ||\n                insufficient_material() ||\n                in_threefold_repetition()\n            )\n        },\n\n        validate_fen: function(fen) {\n            return validate_fen(fen)\n        },\n\n        fen: function() {\n            return generate_fen()\n        },\n\n        board: function() {\n            var output = [],\n                row = []\n\n            for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n                if (board[i] == null) {\n                    row.push(null)\n                } else {\n                    row.push({ type: board[i].type, color: board[i].color })\n                }\n                if ((i + 1) & 0x88) {\n                    output.push(row)\n                    row = []\n                    i += 8\n                }\n            }\n\n            return output\n        },\n\n        pgn: function(options) {\n            /* using the specification from http://www.chessclub.com/help/PGN-spec\n             * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\n             */\n            var newline =\n                typeof options === 'object' && typeof options.newline_char === 'string'\n                    ? options.newline_char\n                    : '\\n'\n            var max_width =\n                typeof options === 'object' && typeof options.max_width === 'number'\n                    ? options.max_width\n                    : 0\n            var result = []\n            var header_exists = false\n\n            /* add the PGN header headerrmation */\n            for (var i in header) {\n                /* TODO: order of enumerated properties in header object is not\n                 * guaranteed, see ECMA-262 spec (section 12.6.4)\n                 */\n                result.push('[' + i + ' \"' + header[i] + '\"]' + newline)\n                header_exists = true\n            }\n\n            if (header_exists && history.length) {\n                result.push(newline)\n            }\n\n            /* pop all of history onto reversed_history */\n            var reversed_history = []\n            while (history.length > 0) {\n                reversed_history.push(undo_move())\n            }\n\n            var moves = []\n            var move_string = ''\n\n            /* build the list of moves.  a move_string looks like: \"3. e3 e6\" */\n            while (reversed_history.length > 0) {\n                var move = reversed_history.pop()\n\n                /* if the position started with black to move, start PGN with 1. ... */\n                if (!history.length && move.color === 'b') {\n                    move_string = move_number + '. ...'\n                } else if (move.color === 'w') {\n                    /* store the previous generated move_string if we have one */\n                    if (move_string.length) {\n                        moves.push(move_string)\n                    }\n                    move_string = move_number + '.'\n                }\n\n                move_string = move_string + ' ' + move_to_san(move, false)\n                make_move(move)\n            }\n\n            /* are there any other leftover moves? */\n            if (move_string.length) {\n                moves.push(move_string)\n            }\n\n            /* is there a result? */\n            if (typeof header.Result !== 'undefined') {\n                moves.push(header.Result)\n            }\n\n            /* history should be back to what is was before we started generating PGN,\n             * so join together moves\n             */\n            if (max_width === 0) {\n                return result.join('') + moves.join(' ')\n            }\n\n            /* wrap the PGN output at max_width */\n            var current_width = 0\n            for (var i = 0; i < moves.length; i++) {\n                /* if the current move will push past max_width */\n                if (current_width + moves[i].length > max_width && i !== 0) {\n                    /* don't end the line with whitespace */\n                    if (result[result.length - 1] === ' ') {\n                        result.pop()\n                    }\n\n                    result.push(newline)\n                    current_width = 0\n                } else if (i !== 0) {\n                    result.push(' ')\n                    current_width++\n                }\n                result.push(moves[i])\n                current_width += moves[i].length\n            }\n\n            return result.join('')\n        },\n\n        load_pgn: function(pgn, options) {\n            // allow the user to specify the sloppy move parser to work around over\n            // disambiguation bugs in Fritz and Chessbase\n            var sloppy =\n                typeof options !== 'undefined' && 'sloppy' in options\n                    ? options.sloppy\n                    : false\n\n            function mask(str) {\n                return str.replace(/\\\\/g, '\\\\')\n            }\n\n            function has_keys(object) {\n                for (var key in object) {\n                    return true\n                }\n                return false\n            }\n\n            function parse_pgn_header(header, options) {\n                var newline_char =\n                    typeof options === 'object' &&\n                    typeof options.newline_char === 'string'\n                        ? options.newline_char\n                        : '\\r?\\n'\n                var header_obj = {}\n                var headers = header.split(new RegExp(mask(newline_char)))\n                var key = ''\n                var value = ''\n\n                for (var i = 0; i < headers.length; i++) {\n                    key = headers[i].replace(/^\\[([A-Z][A-Za-z]*)\\s.*\\]$/, '$1')\n                    value = headers[i].replace(/^\\[[A-Za-z]+\\s\"(.*)\"\\]$/, '$1')\n                    if (trim(key).length > 0) {\n                        header_obj[key] = value\n                    }\n                }\n\n                return header_obj\n            }\n\n            var newline_char =\n                typeof options === 'object' && typeof options.newline_char === 'string'\n                    ? options.newline_char\n                    : '\\r?\\n'\n\n            // RegExp to split header. Takes advantage of the fact that header and movetext\n            // will always have a blank line between them (ie, two newline_char's).\n            // With default newline_char, will equal: /^(\\[((?:\\r?\\n)|.)*\\])(?:\\r?\\n){2}/\n            var header_regex = new RegExp(\n                '^(\\\\[((?:' +\n                mask(newline_char) +\n                ')|.)*\\\\])' +\n                '(?:' +\n                mask(newline_char) +\n                '){2}'\n            )\n\n            // If no header given, begin with moves.\n            var header_string = header_regex.test(pgn)\n                ? header_regex.exec(pgn)[1]\n                : ''\n\n            // Put the board in the starting position\n            reset()\n\n            /* parse PGN header */\n            var headers = parse_pgn_header(header_string, options)\n            for (var key in headers) {\n                set_header([key, headers[key]])\n            }\n\n            /* load the starting position indicated by [Setup '1'] and\n             * [FEN position] */\n            if (headers['SetUp'] === '1') {\n                if (!('FEN' in headers && load(headers['FEN'], true))) {\n                    // second argument to load: don't clear the headers\n                    return false\n                }\n            }\n\n            /* delete header to get the moves */\n            var ms = pgn\n                .replace(header_string, '')\n                .replace(new RegExp(mask(newline_char), 'g'), ' ')\n\n            /* delete comments */\n            ms = ms.replace(/(\\{[^}]+\\})+?/g, '')\n\n            /* delete recursive annotation variations */\n            var rav_regex = /(\\([^\\(\\)]+\\))+?/g\n            while (rav_regex.test(ms)) {\n                ms = ms.replace(rav_regex, '')\n            }\n\n            /* delete move numbers */\n            ms = ms.replace(/\\d+\\.(\\.\\.)?/g, '')\n\n            /* delete ... indicating black to move */\n            ms = ms.replace(/\\.\\.\\./g, '')\n\n            /* delete numeric annotation glyphs */\n            ms = ms.replace(/\\$\\d+/g, '')\n\n            /* trim and get array of moves */\n            var moves = trim(ms).split(new RegExp(/\\s+/))\n\n            /* delete empty entries */\n            moves = moves\n                .join(',')\n                .replace(/,,+/g, ',')\n                .split(',')\n            var move = ''\n\n            for (var half_move = 0; half_move < moves.length - 1; half_move++) {\n                move = move_from_san(moves[half_move], sloppy)\n\n                /* move not possible! (don't clear the board to examine to show the\n                 * latest valid position)\n                 */\n                if (move == null) {\n                    return false\n                } else {\n                    make_move(move)\n                }\n            }\n\n            /* examine last move */\n            move = moves[moves.length - 1]\n            if (POSSIBLE_RESULTS.indexOf(move) > -1) {\n                if (has_keys(header) && typeof header.Result === 'undefined') {\n                    set_header(['Result', move])\n                }\n            } else {\n                move = move_from_san(move, sloppy)\n                if (move == null) {\n                    return false\n                } else {\n                    make_move(move)\n                }\n            }\n            return true\n        },\n\n        header: function() {\n            return set_header(arguments)\n        },\n\n        ascii: function() {\n            return ascii()\n        },\n\n        turn: function() {\n            return turn\n        },\n\n        move: function(move, options) {\n            /* The move function can be called with in the following parameters:\n             *\n             * .move('Nxb7')      <- where 'move' is a case-sensitive SAN string\n             *\n             * .move({ from: 'h7', <- where the 'move' is a move object (additional\n             *         to :'h8',      fields are ignored)\n             *         promotion: 'q',\n             *      })\n             */\n\n            // allow the user to specify the sloppy move parser to work around over\n            // disambiguation bugs in Fritz and Chessbase\n            var sloppy =\n                typeof options !== 'undefined' && 'sloppy' in options\n                    ? options.sloppy\n                    : false\n\n            var move_obj = null\n\n            if (typeof move === 'string') {\n                move_obj = move_from_san(move, sloppy)\n            } else if (typeof move === 'object') {\n                var moves = generate_moves()\n\n                /* convert the pretty move object to an ugly move object */\n                for (var i = 0, len = moves.length; i < len; i++) {\n                    if (\n                        move.from === algebraic(moves[i].from) &&\n                        move.to === algebraic(moves[i].to) &&\n                        (!('promotion' in moves[i]) ||\n                            move.promotion === moves[i].promotion)\n                    ) {\n                        move_obj = moves[i]\n                        break\n                    }\n                }\n            }\n\n            /* failed to find move */\n            if (!move_obj) {\n                return null\n            }\n\n            /* need to make a copy of move because we can't generate SAN after the\n             * move is made\n             */\n            var pretty_move = make_pretty(move_obj)\n\n            make_move(move_obj)\n\n            return pretty_move\n        },\n\n        undo: function() {\n            var move = undo_move()\n            return move ? make_pretty(move) : null\n        },\n\n        clear: function() {\n            return clear()\n        },\n\n        put: function(piece, square) {\n            return put(piece, square)\n        },\n\n        get: function(square) {\n            return get(square)\n        },\n\n        remove: function(square) {\n            return remove(square)\n        },\n\n        perft: function(depth) {\n            return perft(depth)\n        },\n\n        square_color: function(square) {\n            if (square in SQUARES) {\n                var sq_0x88 = SQUARES[square]\n                return (rank(sq_0x88) + file(sq_0x88)) % 2 === 0 ? 'light' : 'dark'\n            }\n\n            return null\n        },\n\n        history: function(options) {\n            var reversed_history = []\n            var move_history = []\n            var verbose =\n                typeof options !== 'undefined' &&\n                'verbose' in options &&\n                options.verbose\n\n            while (history.length > 0) {\n                reversed_history.push(undo_move())\n            }\n\n            while (reversed_history.length > 0) {\n                var move = reversed_history.pop()\n                if (verbose) {\n                    move_history.push(make_pretty(move))\n                } else {\n                    move_history.push(move_to_san(move))\n                }\n                make_move(move)\n            }\n\n            return move_history\n        }\n    }\n}\n\n/* export Chess object if using node or any other CommonJS compatible\n * environment */\nif (typeof exports !== 'undefined') exports.Chess = Chess\n/* export Chess object for any RequireJS compatible environment */\nif (typeof define !== 'undefined')\n    define(function() {\n        return Chess\n    })\n\n/**\n * ES6 Wrapper for chess.js\n * The API of ChessJs will be the same as of chess.js\n */\nexport { Chess }","/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-pgn\n * License: MIT, see file 'LICENSE'\n */\nimport {pgnParser} from \"./parser/pgnParser.js\"\nimport {Chess} from \"../../lib/chess.mjs/Chess.js\"\n\nfunction IllegalMoveException(fen, notation) {\n    this.fen = fen\n    this.notation = notation\n    this.toString = function () {\n        return \"IllegalMoveException: \" + fen + \" => \" + notation\n    }\n}\n\nexport class History {\n\n    constructor(historyString = undefined, setUpFen = undefined, sloppy = false) {\n        if (!historyString) {\n            this.clear()\n        } else {\n            const parsedMoves = pgnParser.parse(historyString.replace(/\\s\\s+/g, \" \").replace(/\\n/g, \" \"))\n            this.moves = this.traverse(parsedMoves[0], setUpFen, undefined, 1, sloppy)\n        }\n        this.setUpFen = setUpFen\n    }\n\n    clear() {\n        this.moves = []\n    }\n\n    traverse(parsedMoves, fen, parent = undefined, ply = 1, sloppy = false) {\n        const chess = fen ? new Chess(fen) : new Chess() // chess.js must be included in HTML\n        const moves = []\n        let previousMove = parent\n        for (let parsedMove of parsedMoves) {\n            if (parsedMove.notation) {\n                const notation = parsedMove.notation.notation\n                const move = chess.move(notation, {sloppy: sloppy})\n                if (move) {\n                    if (previousMove) {\n                        move.previous = previousMove\n                        previousMove.next = move\n                    } else {\n                        move.previous = undefined\n                    }\n                    move.ply = ply\n                    this.fillMoveFromChessState(move, chess)\n                    if (parsedMove.nag) {\n                        move.nag = parsedMove.nag[0]\n                    }\n                    if (parsedMove.commentBefore) {\n                        move.commentBefore = parsedMove.commentBefore\n                    }\n                    if (parsedMove.commentMove) {\n                        move.commentMove = parsedMove.commentMove\n                    }\n                    if (parsedMove.commentAfter) {\n                        move.commentAfter = parsedMove.commentAfter\n                    }\n                    move.variations = []\n                    const parsedVariations = parsedMove.variations\n                    if (parsedVariations.length > 0) {\n                        const lastFen = moves.length > 0 ? moves[moves.length - 1].fen : fen\n                        for (let parsedVariation of parsedVariations) {\n                            move.variations.push(this.traverse(parsedVariation, lastFen, previousMove, ply, sloppy))\n                        }\n                    }\n                    move.variation = moves\n                    moves.push(move)\n                    previousMove = move\n                } else {\n                    throw new IllegalMoveException(chess.fen(), notation)\n                }\n            }\n            ply++\n        }\n        return moves\n    }\n\n    fillMoveFromChessState(move, chess) {\n        move.fen = chess.fen()\n        move.variations = []\n        if (chess.game_over()) {\n            move.gameOver = true\n            if (chess.in_draw()) {\n                move.inDraw = true\n            }\n            if (chess.in_stalemate()) {\n                move.inStalemate = true\n            }\n            if (chess.insufficient_material()) {\n                move.insufficientMaterial = true\n            }\n            if (chess.in_threefold_repetition()) {\n                move.inThreefoldRepetition = true\n            }\n            if (chess.in_checkmate()) {\n                move.inCheckmate = true\n            }\n        }\n        if (chess.in_check()) {\n            move.inCheck = true\n        }\n    }\n\n    /**\n     * @param move\n     * @return the history to the move which may be in a variation\n     */\n    historyToMove(move) {\n        const moves = []\n        let pointer = move\n        moves.push(pointer)\n        while (pointer.previous) {\n            moves.push(pointer.previous)\n            pointer = pointer.previous\n        }\n        return moves.reverse()\n    }\n\n    addMove(notation, previous = undefined, sloppy = true) {\n        if (!previous) {\n            if (this.moves.length > 0) {\n                previous = this.moves[this.moves.length - 1]\n            }\n        }\n        const chess = new Chess(this.setUpFen ? this.setUpFen : undefined)\n        if (previous) {\n            const historyToMove = this.historyToMove(previous)\n            for (const moveInHistory of historyToMove) {\n                chess.move(moveInHistory)\n            }\n        }\n        const move = chess.move(notation, {sloppy: sloppy})\n        if (!move) {\n            throw new Error(\"invalid move\")\n        }\n        this.fillMoveFromChessState(move, chess)\n        if (previous) {\n            move.previous = previous\n            move.ply = previous.ply + 1\n            if (previous.next) {\n                previous.next.variations.push([])\n                move.variation = previous.next.variations[previous.next.variations.length - 1]\n                move.variation.push(move)\n            } else {\n                previous.next = move\n                move.variation = previous.variation\n                previous.variation.push(move)\n            }\n        } else {\n            move.variation = this.moves\n            move.ply = 1\n            this.moves.push(move)\n        }\n        return move\n    }\n\n    render() {\n        // TODO Variants\n        let rendered = \"\";\n        // let i = 0\n        for (const move of this.moves) {\n           rendered += move.san + \" \"\n        }\n        return rendered\n    }\n\n}\n","/**\n * Author and copyright: Stefan Haack (https://shaack.com)\n * Repository: https://github.com/shaack/cm-pgn\n * License: MIT, see file 'LICENSE'\n */\nimport {Header, TAGS} from \"./Header.js\"\nimport {History} from \"./History.js\"\n\nexport class Pgn {\n\n    constructor(pgnString = \"\", props = {}) {\n        // only the header?\n        const lastHeaderElement =  pgnString.trim().substr(-1) === \"]\" ? pgnString.length : pgnString.lastIndexOf(\"]\\n\\n\") + 1\n        const headerString = pgnString.substr(0, lastHeaderElement)\n        const historyString = pgnString.substr(lastHeaderElement)\n        const sloppy = !!props.sloppy\n        this.header = new Header(headerString)\n        if (this.header.tags[TAGS.SetUp] === \"1\" && this.header.tags[TAGS.FEN]) {\n            this.history = new History(historyString, this.header.tags[TAGS.FEN], sloppy)\n        } else {\n            this.history = new History(historyString, undefined, sloppy)\n        }\n    }\n\n    render() {\n        let pgn = \"\"\n        pgn += this.header.render()\n        pgn += \"\\n\"\n        pgn += this.history.render()\n        return pgn\n    }\n\n}","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar matchFullFEN = /^\\s*([prnbqkPRNBQK12345678]{1,8}(?:\\/[prnbqkPRNBQK12345678]{1,8}){7})\\s+(w|b)\\s+([KQkqA-Ha-h]{1,4}|\\-)\\s+(?:(?:([a-h][36]|\\-)\\s+(\\d{1,3})\\s+(\\d{1,4}))|(?:0\\s+0))\\s*$/;\nvar fenExpand = /[1-8]+/g;\nvar fenPack = /\\-+/g;\nvar fenSubst = { 1: '-', 2: '--', 3: '---', 4: '----', 5: '-----', 6: '------', 7: '-------', 8: '--------' };\nvar FenParser = (function () {\n    function FenParser(value) {\n        this.original = '';\n        this.isValid = false;\n        this.positions = '';\n        this.ranks = [];\n        this.turn = '';\n        this.castles = '';\n        this.enpass = '';\n        this.halfmoveClock = 0;\n        this.moveNumber = 0;\n        this.original = (typeof value === 'string') ? value : '';\n        var match = this.original.match(matchFullFEN);\n        this.isValid = !!match;\n        if (match) {\n            this.positions = match[1];\n            this.ranks = match[1].split('/').map(function (s) { return s.replace(fenExpand, function (i) { return fenSubst[i]; }); });\n            this.turn = match[2];\n            this.castles = match[3];\n            this.enpass = match[4] !== undefined ? match[4] : '-';\n            this.halfmoveClock = match[5] !== undefined ? parseInt(match[5], 10) : 0;\n            this.moveNumber = match[6] !== undefined ? parseInt(match[6], 10) : 1;\n            this.isValid = this.ranks.reduce(function (before, rank) { return before && rank.length === 8; }, true);\n        }\n    }\n    FenParser.prototype.toString = function () {\n        var positions = this.ranks.map(function (rank) { return rank.replace(fenPack, function (m) { return m.length.toString(); }); }).join('/');\n        return positions + \" \" + this.turn + \" \" + this.castles + \" \" + this.enpass + \" \" + this.halfmoveClock + \" \" + this.moveNumber;\n    };\n    FenParser.prototype.hasPiece = function (piece) {\n        return this.positions.indexOf(piece) >= 0;\n    };\n    FenParser.prototype.counts = function () {\n        var counts = {};\n        for (var _i = 0, _a = this.ranks; _i < _a.length; _i++) {\n            var rank = _a[_i];\n            for (var _b = 0, rank_1 = rank; _b < rank_1.length; _b++) {\n                var ch = rank_1[_b];\n                if (ch !== '-') {\n                    counts[ch] = (counts[ch] || 0) + 1;\n                }\n            }\n        }\n        return counts;\n    };\n    FenParser.isFen = function (text) { return (typeof text === 'string' && matchFullFEN.test(text)); };\n    return FenParser;\n}());\nexports.FenParser = FenParser;\nexports.default = FenParser;\n//# sourceMappingURL=fenParser.js.map","const round = `[Event \"Match\"]\r\n[Site \"Philadelphie, USA\"]\r\n[Date \"1996.02.10\"]\r\n[Round \"1\"]\r\n[White \"Deep Blue (Computer)\"]\r\n[Black \"Garry Kasparov\"]\r\n[Result \"1-0\"]\r\n[ECO \"B22\"]\r\n[PlyCount \"73\"]\r\n[EventDate \"1996.??.??\"]\r\n[WhiteElo \"\"]\r\n[BlackElo \"\"]\r\n\r\n1. e4 c5 {Garry choisi sa défense favorite contre 1.e4} 2. c3\r\n{L'ordinateur évite les grandes lignes en jouant l'Alapine.} 2... d5 3.\r\nexd5 Qxd5 4. d4 Nf6 5. Nf3 Bg4 6. Be2 e6 7. h3 Bh5 8. O-O Nc6 9. Be3 cxd4 10.\r\ncxd4 Bb4 {Un coup assez rare.} (10... Be7 {Est le coup le plus joué dans\r\ncette position.} 11. Nc3 Qd6) 11. a3 Ba5 12. Nc3 Qd6 13. Nb5 Qe7 14. Ne5 Bxe2\r\n15. Qxe2 O-O 16. Rac1 Rac8 {Les deux camps ont terminé leur\r\ndéveloppement et activé toutes leurs pièces. Les blancs\r\njouent avec un pion isolé et vont devoir être très actifs\r\npour justifier cette légère faiblesse.} 17. Bg5 Bb6 18. Bxf6 gxf6\r\n19. Nc4 Rfd8 20. Nxb6 axb6 21. Rfd1 f5 22. Qe3 {Les blancs activent leur dame et\r\nmenace d'envahir l'aile roi adverse.} 22... Qf6 23. d5 Rxd5 24. Rxd5 exd5 25. b3\r\nKh8 26. Qxb6 Rg8 {Pour compenser leur structure de pions ruinée, les\r\nnoirs tentent d'organiser une attaque.} 27. Qc5 d4 $2 (27... f4 {garde la position\r\n&agrave; peu près égale.}) 28. Nd6 $1 f4 29. Nxb7 Ne5 30. Qd5 f3 31.\r\ng3 Nd3 32. Rc7 {Les pièces blanches se coordonnent pour attaquer la\r\nposition noire.} 32... Re8 $4 {L'erreur fatale.} 33. Nd6 Re1+ 34. Kh2 Nxf2 35.\r\nNxf7+ Kg7 36. Ng5+ Kh6 37. Rxh7+ {C'est la première fois qu'un ordinateur\r\nbat le champion du monde en cadence classique. Un moment historique  $1} 1-0`\r\n\r\nexport default round\r\n","import Chessboard from './js/chessboard'\r\n// import pieces from './js/pieces'\r\nimport { Pawn, Rook, Knight, Bishop, Queen, King } from './js/pieces'\r\nimport { Pgn } from 'cm-pgn'\r\nimport FenParser from '@chess-fu/fen-parser'\r\nimport firstRound from './pgn/1-1996'\r\n\r\nconst prev = document.getElementById('prev-js')\r\nconst play = document.getElementById('play-js')\r\nconst next = document.getElementById('next-js')\r\nconst stop = document.getElementById('stop-js')\r\nconst delay = document.getElementById('delay-js')\r\nconst audioInputs = [...document.getElementsByClassName('audio-input')]\r\nlet audios = {}\r\n\r\nlet cursor = 0\r\nconst pgn = new Pgn(firstRound)\r\nconst fens = pgn.history.moves.map(m => {\r\n\tconst fen = new FenParser(m.fen)\r\n\treturn fen.ranks\r\n})\r\nconst initialPosition = new FenParser('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1')\r\nfens.unshift(initialPosition.ranks)\r\n\r\nconst chessboard = new Chessboard(document.getElementById('chessboard'))\r\nconst boards = []\r\nfens.forEach(fen => {\r\n\tconst pieces = []\r\n\tfen.forEach((row, y) => {\r\n\t\t;[...row].forEach((p, x) => {\r\n\t\t\tif (p === 'P') {\r\n\t\t\t\tpieces.push(new Pawn({ y: x, x: 7 - y }, true))\r\n\t\t\t} else if (p === 'p') {\r\n\t\t\t\tpieces.push(new Pawn({ y: x, x: 7 - y }, false))\r\n\t\t\t} else if (p === 'r') {\r\n\t\t\t\tpieces.push(new Rook({ y: x, x: 7 - y }, false))\r\n\t\t\t} else if (p === 'R') {\r\n\t\t\t\tpieces.push(new Rook({ y: x, x: 7 - y }, true))\r\n\t\t\t} else if (p === 'n') {\r\n\t\t\t\tpieces.push(new Knight({ y: x, x: 7 - y }, false))\r\n\t\t\t} else if (p === 'N') {\r\n\t\t\t\tpieces.push(new Knight({ y: x, x: 7 - y }, true))\r\n\t\t\t} else if (p === 'b') {\r\n\t\t\t\tpieces.push(new Bishop({ y: x, x: 7 - y }, false))\r\n\t\t\t} else if (p === 'B') {\r\n\t\t\t\tpieces.push(new Bishop({ y: x, x: 7 - y }, true))\r\n\t\t\t} else if (p === 'q') {\r\n\t\t\t\tpieces.push(new Queen({ y: x, x: 7 - y }, false))\r\n\t\t\t} else if (p === 'Q') {\r\n\t\t\t\tpieces.push(new Queen({ y: x, x: 7 - y }, true))\r\n\t\t\t} else if (p === 'k') {\r\n\t\t\t\tpieces.push(new King({ y: x, x: 7 - y }, false))\r\n\t\t\t} else if (p === 'K') {\r\n\t\t\t\tpieces.push(new King({ y: x, x: 7 - y }, true))\r\n\t\t\t}\r\n\t\t})\r\n\t})\r\n\tboards.push(pieces)\r\n})\r\nconst moves = pgn.history.moves.map(m => {\r\n\treturn m.flags\r\n})\r\nfunction draw() {\r\n\tchessboard.draw()\r\n\r\n\tboards[cursor].forEach(p => {\r\n\t\tp.draw(chessboard)\r\n\t})\r\n}\r\n\r\nnext.addEventListener('click', e => {\r\n\tnextMove()\r\n\tcursor = Math.min(cursor + 1, boards.length - 1)\r\n\tdraw()\r\n})\r\nprev.addEventListener('click', e => {\r\n\tcursor = Math.max(cursor - 1, 0)\r\n\tdraw()\r\n})\r\n\r\nlet playingId\r\nlet playing = false\r\nplay.addEventListener('click', playPause)\r\n\r\nfunction playPause() {\r\n\tplaying = !playing\r\n\tplay.innerHTML = playing ? '<i class=\"fa fa-pause\" aria-hidden=\"true\"></i>' : '<i class=\"fa fa-play\" aria-hidden=\"true\"></i>'\r\n\tif (playing) {\r\n\t\tplayingId = window.setInterval(() => {\r\n\t\t\tnextMove()\r\n\t\t\tcursor++\r\n\t\t\tif (cursor >= boards.length - 1) playPause()\r\n\t\t\telse draw()\r\n\t\t}, delay.value * 1000)\r\n\t} else {\r\n\t\tclearInterval(playingId)\r\n\t}\r\n}\r\n\r\nstop.addEventListener('click', e => {\r\n\tcursor = 0\r\n\tif (playing) playPause()\r\n\tdraw()\r\n})\r\n\r\naudioInputs.forEach(el => {\r\n\tel.addEventListener('change', e => {\r\n\t\tconst id = e.target.id\r\n\t\t// Make sure we have files to use\r\n\t\tif (!e.target.files.length) return\r\n\r\n\t\t// Create a blob that we can use as an src for our audio element\r\n\t\tconst urlObj = URL.createObjectURL(e.target.files[0])\r\n\r\n\t\t// Create an audio element\r\n\t\taudios[id] = document.createElement('audio')\r\n\r\n\t\t// Clean up the URL Object after we are done with it\r\n\t\taudios[id].addEventListener('load', () => {\r\n\t\t\tURL.revokeObjectURL(urlObj)\r\n\t\t})\r\n\r\n\t\t// Append the audio element\r\n\t\t// document.body.appendChild(audio)\r\n\r\n\t\t// Allow us to control the audio\r\n\t\taudios[id].controls = 'true'\r\n\r\n\t\t// Set the src and start loading the audio from the file\r\n\t\taudios[id].src = urlObj\r\n\t\taudios[id].play()\r\n\t})\r\n})\r\n\r\nfunction nextMove() {\r\n\tconst m = moves[cursor]\r\n\tconsole.log(m)\r\n\tif (audios[m]) {\r\n\t\taudios[m].play()\r\n\t}\r\n}\r\n\r\ndraw()\r\n","/**\r\n *\r\n * @param {HTMLElement} canvas\r\n */\r\nexport default function Chessboard(canvas) {\r\n\tthis.ctx = canvas.getContext('2d')\r\n\tthis.width = canvas.width\r\n\tthis.height = canvas.width\r\n\tthis.cellWidth = this.width / 8\r\n\tthis.cellHeight = this.height / 8\r\n\tthis.draw = function () {\r\n\t\tthis.ctx.clearRect(0, 0, this.width, this.height)\r\n\t\tfor (let index = 0; index < 64; index++) {\r\n\t\t\tconst y = Math.floor(index / 8)\r\n\t\t\tconst x = index - y * 8\r\n\t\t\tconst color = 'rgb(233, 244, 251)'\r\n\t\t\tthis.ctx.strokeStyle = color\r\n\t\t\tthis.ctx.strokeRect(x * this.cellWidth, y * this.cellHeight, this.cellWidth, this.cellHeight)\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["instance","Constructor","TypeError","$e5f9bd0c37e9914c$var$_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","arr","Array","isArray","arr2","$c0e5c3a46846db0d$export$2e2bcd8739ae039","iter","Symbol","iterator","toString","call","from","$8664303016091545$export$2e2bcd8739ae039","$9a10eb5a4ae3d243$export$2e2bcd8739ae039","$1534e7916ca4f87a$export$afbf1b5adefd01cb","pos","isWhite","this","cnPos","draw","chessboard","ctx","width","cellWidth","height","cellHeight","x","y","r","beginPath","arc","Math","PI","strokeStyle","stroke","fillStyle","fill","closePath","$1534e7916ca4f87a$export$80efeb345028fd7a","rectWidth","rectHeight","strokeRect","fillRect","$1534e7916ca4f87a$export$f582210173d40b68","horizontalW","horizontalH","verticalW","verticalH","tx","ty","translate","scale","moveTo","lineTo","setTransform","$1534e7916ca4f87a$export$b7d93588bf862b40","tWidth","tHeight","$1534e7916ca4f87a$export$69fad980d2520d23","hWidth","hHeight","vWidth","vHeight","rotate","$1534e7916ca4f87a$export$e86e1096c8a73b1d","$3ff29214f509a20e$export$de435b1ae0c975f3","$3ff29214f509a20e$export$8b251419efc915eb","headerString","arguments","clear","rows","match","tag","tags","rendered","concat","$1619534e816b8648$var$peg$SyntaxError","message","expected","found","location","name","Error","captureStackTrace","$1619534e816b8648$var$peg$parse","input","options","peg$result","peg$FAILED","peg$startRuleFunctions","pgn","peg$parsepgn","peg$startRuleFunction","peg$c8","peg$literalExpectation","peg$c11","peg$c14","peg$c17","peg$c19","peg$c20","peg$c23","peg$c25","peg$c26","peg$classExpectation","peg$c29","peg$c31","peg$c35","peg$c37","peg$c38","peg$c39","peg$c41","peg$otherExpectation","peg$c42","peg$c43","peg$c44","digits","parseInt","join","peg$c46","peg$c51","peg$c52","peg$c55","peg$c57","peg$c58","peg$c60","peg$c61","ch","peg$c63","peg$c65","peg$c67","peg$c71","peg$c73","peg$c74","peg$c76","peg$c77","peg$c79","peg$c80","peg$c82","peg$c83","peg$c86","peg$c89","peg$c92","peg$c94","peg$c96","peg$c98","peg$c100","peg$c104","peg$c107","peg$c110","peg$c113","peg$c116","peg$c119","peg$c120","peg$c123","peg$c126","peg$c129","peg$c132","peg$c135","peg$c138","peg$c140","peg$c141","peg$c142","peg$c143","peg$c144","peg$c145","peg$c147","peg$c149","peg$currPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","text","ignoreCase","type","parts","inverted","description","peg$computePosDetails","p","details","charCodeAt","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","start","offset","end","peg$fail","push","peg$buildStructuredError","buildMessage","s0","s1","s2","pw","peg$parsepgnWhite","peg$parsepgnStartWhite","peg$parsepgnBlack","unshift","peg$parsepgnStartBlack","pb","all","peg$c1","peg$parsewhiteSpace","s3","s4","s5","s6","s7","s8","s9","s10","s11","s12","s13","s14","s15","cm","cb","hm","nag","ca","vari","move","peg$parsecomment","peg$parseinteger","peg$parsemoveNumber","peg$parsehalfMove","peg$parsenags","peg$parsevariationWhite","moveNumber","notation","commentBefore","commentAfter","commentMove","variations","peg$parseendGame","peg$parsemoveEllipse","peg$parsevariationBlack","substr","peg$parsecl","test","charAt","peg$parsecr","trim","peg$parsepl","peg$parsepr","fig","disc","str","col","row","pr","peg$parsefigure","peg$parsediscriminator","peg$parsestrike","peg$parsecolumn","peg$parserow","peg$parsecheckdisc","peg$parsepromotion","peg$parsecheck","strike","check","promotion","peg$parsestrikeOrDash","cols","peg$c49","peg$c50","peg$c53","peg$c56","peg$parsenag","child","parent","ctor","constructor","$1619534e816b8648$var$peg$subclass","expected1","found1","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","class","escapedParts","classEscape","any","other","hex","toUpperCase","s","replace","j","descriptions","sort","slice","describeExpected","$1619534e816b8648$export$3cdeb556c0405180","history","$da5df6e5f332d0ce$export$a4d6ea685c300d39","fen1","BLACK","WHITE","EMPTY","PAWN","BISHOP","KING","DEFAULT_POSITION","POSSIBLE_RESULTS","PAWN_OFFSETS","b","w","PIECE_OFFSETS","n","q","k","ATTACKS","RAYS","SHIFTS","FLAGS","NORMAL","CAPTURE","BIG_PAWN","EP_CAPTURE","PROMOTION","KSIDE_CASTLE","QSIDE_CASTLE","BITS","SQUARES","a8","b8","c8","d8","e8","f8","g8","h8","a7","b7","c7","d7","e7","f7","g7","h7","a6","b6","c6","d6","e6","f6","g6","h6","a5","b5","c5","d5","e5","f5","g5","h5","a4","b4","c4","d4","e4","f4","g4","h4","a3","b3","c3","d3","e3","f3","g3","h3","a2","b2","c2","d2","e2","f2","g2","h2","a1","b1","c1","d1","e1","f1","g1","h1","ROOKS","square","flag","board1","kings","turn","castling","ep_square","half_moves","move_number","header1","keep_headers","update_setup","generate_fen","reset","load","fen","tokens","split","position","validate_fen","valid","piece","indexOf","color","put","toLowerCase","algebraic","errors","error_number","error","isNaN","sum_fields","previous_was_number","empty","cflags","epflags","set_header","args","get","sq","build_move","board","to","flags","captured","generate_moves","add_move","moves","rank","pieces","len","moves1","us","them","swap_color","second_rank","first_sq","last_sq","single_square","legal","i1","len1","castling_to","castling_from","attacked","legal_moves","make_move","king_attacked","undo_move","move_to_san","sloppy","output","disambiguator","ambiguities","same_rank","same_file","ambig_from","ambig_to","file","get_disambiguator","in_check","in_checkmate","stripped_san","difference","index","blocked","in_stalemate","insufficient_material","bishops","num_pieces","sq_color","sum","in_threefold_repetition","positions","repetition","pop","old","move_from_san","clean_move","matches","f","substring","c","make_pretty","ugly_move","clone","san","obj","dupe","property","perft","depth","nodes","KNIGHT","ROOK","QUEEN","keys","ugly_moves","moves2","verbose","in_draw","game_over","newline","newline_char","max_width","result","header_exists","reversed_history","move_string","Result","current_width","load_pgn","options1","mask","newline_char1","header_regex","RegExp","header_string","exec","headers1","header","header_obj","headers","value","parse_pgn_header","key1","ms","rav_regex","half_move","object","has_keys","ascii","move_obj","pretty_move","undo","remove","square_color","sq_0x88","move_history","$5edcdca06243b3f4$var$IllegalMoveException","$da5df6e5f332d0ce$exports","define","$5edcdca06243b3f4$export$84202caead5689ba","historyString","setUpFen","parsedMoves","parse","traverse","undefined","ply","chess","Chess","previousMove","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","next","done","parsedMove","previous","fillMoveFromChessState","parsedVariations","lastFen","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","parsedVariation","err","return","variation","gameOver","inDraw","inStalemate","insufficientMaterial","inThreefoldRepetition","inCheckmate","inCheck","pointer","reverse","historyToMove","moveInHistory","$54fe684421bae380$export$5fdd9ba0e9cda5d1","pgnString","lastHeaderElement","lastIndexOf","render","$c132100c0b45b5ae$exports","$c132100c0b45b5ae$var$matchFullFEN","$c132100c0b45b5ae$var$fenExpand","$c132100c0b45b5ae$var$fenPack","$c132100c0b45b5ae$var$fenSubst","$c132100c0b45b5ae$var$FenParser","FenParser","original","isValid","ranks","castles","enpass","halfmoveClock","map","reduce","before","m","hasPiece","counts","_i","_a","_b","rank_1","isFen","default","$5fbffa87c50562b9$var$prev","document","getElementById","$5fbffa87c50562b9$var$play","$5fbffa87c50562b9$var$next","$5fbffa87c50562b9$var$stop","$5fbffa87c50562b9$var$delay","$5fbffa87c50562b9$var$audioInputs","$44ff19cc49d55455$export$2e2bcd8739ae039","getElementsByClassName","$5fbffa87c50562b9$var$audios","$5fbffa87c50562b9$var$cursor","$5fbffa87c50562b9$var$pgn","$5fbffa87c50562b9$var$fens","$parcel$interopDefault","$5fbffa87c50562b9$var$initialPosition","$5fbffa87c50562b9$var$chessboard","canvas","getContext","clearRect","floor","$5fbffa87c50562b9$var$boards","forEach","$5fbffa87c50562b9$var$playingId","$5fbffa87c50562b9$var$moves","$5fbffa87c50562b9$var$draw","addEventListener","e","$5fbffa87c50562b9$var$nextMove","min","max","$5fbffa87c50562b9$var$playing","$5fbffa87c50562b9$var$playPause","innerHTML","window","setInterval","clearInterval","console","log","play","el","id","files","urlObj","URL","createObjectURL","createElement","revokeObjectURL","controls","src"],"version":3,"file":"index.a199e66c.js.map"}